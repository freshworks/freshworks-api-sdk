/**
 * Freshteam Public APIs
 * Freshteam public APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freshteam.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Employee from "../model/Employee";
import EmployeeCreate from "../model/EmployeeCreate";
import EmployeeDetail from "../model/EmployeeDetail";
import InlineResponse400 from "../model/InlineResponse400";
import InlineResponse401 from "../model/InlineResponse401";
import InlineResponse403 from "../model/InlineResponse403";
import InlineResponse404 from "../model/InlineResponse404";
import InlineResponse422 from "../model/InlineResponse422";
import InlineResponse500 from "../model/InlineResponse500";
import Model500Error from "../model/Model500Error";

/**
 * Employee service.
 * @module api/EmployeeApi
 * @version 1.0.0
 */
export default class EmployeeApi {
  /**
   * Constructs a new EmployeeApi.
   * @alias module:api/EmployeeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create an Employee
   * Create an Employee
   * @param {module:model/EmployeeCreate} employee
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Employee} and HTTP response
   */
  createEmployeeWithHttpInfo(employee) {
    let postBody = employee;
    // verify the required parameter 'employee' is set
    if (employee === undefined || employee === null) {
      throw new Error("Missing the required parameter 'employee' when calling createEmployee");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Employee;
    return this.apiClient.callApi(
      "/employees",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create an Employee
   * Create an Employee
   * @param {module:model/EmployeeCreate} employee
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Employee}
   */
  createEmployee(employee) {
    return this.createEmployeeWithHttpInfo(employee).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Details of Employee
   * Get the Details of Employee in the Account
   * @param {Number} id the employee identifier, as id
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.include Additional Properties to include in response
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmployeeDetail} and HTTP response
   */
  getEmployeeWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getEmployee");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {
      include: this.apiClient.buildCollectionParam(opts["include"], "csv")
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = EmployeeDetail;
    return this.apiClient.callApi(
      "/employees/{id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Details of Employee
   * Get the Details of Employee in the Account
   * @param {Number} id the employee identifier, as id
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.include Additional Properties to include in response
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmployeeDetail}
   */
  getEmployee(id, opts) {
    return this.getEmployeeWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Employees List
   * List of active employees from directory
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.status the status key
   * @param {String} opts.firstName  First Name of users to query
   * @param {String} opts.lastName Last Name of users to query
   * @param {String} opts.personalEmail Personal Email of users to query
   * @param {String} opts.officialEmail Official Email of users to query
   * @param {String} opts.employeeType Employee type of users to query
   * @param {Array.<Number>} opts.department the identifier of users departments to query, as id
   * @param {Array.<Number>} opts.businessUnit the identifier of users business units to query, as id
   * @param {Array.<Number>} opts.location the identifier of user location, as id
   * @param {Array.<Number>} opts.reportingManager the identifier of user reporting manager, as id
   * @param {String} opts.employeeId Employee Id of users to query
   * @param {Date} opts.updatedSince the identifier of user updated_since
   * @param {Boolean} opts.draft the identifier of user draft
   * @param {Boolean} opts.deleted the identifier of user deleted
   * @param {Boolean} opts.terminated the identifier of user terminated
   * @param {Number} opts.page page number
   * @param {module:model/String} opts.sort Sort By
   * @param {module:model/String} opts.sortType Sort Type
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Employee>} and HTTP response
   */
  getEmployeesWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      status: this.apiClient.buildCollectionParam(opts["status"], "csv"),
      first_name: opts["firstName"],
      last_name: opts["lastName"],
      personal_email: opts["personalEmail"],
      official_email: opts["officialEmail"],
      employee_type: opts["employeeType"],
      department: this.apiClient.buildCollectionParam(opts["department"], "csv"),
      business_unit: this.apiClient.buildCollectionParam(opts["businessUnit"], "csv"),
      location: this.apiClient.buildCollectionParam(opts["location"], "csv"),
      reporting_manager: this.apiClient.buildCollectionParam(opts["reportingManager"], "csv"),
      employee_id: opts["employeeId"],
      updated_since: opts["updatedSince"],
      draft: opts["draft"],
      deleted: opts["deleted"],
      terminated: opts["terminated"],
      page: opts["page"],
      sort: opts["sort"],
      sort_type: opts["sortType"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [Employee];
    return this.apiClient.callApi(
      "/employees",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Employees List
   * List of active employees from directory
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.status the status key
   * @param {String} opts.firstName  First Name of users to query
   * @param {String} opts.lastName Last Name of users to query
   * @param {String} opts.personalEmail Personal Email of users to query
   * @param {String} opts.officialEmail Official Email of users to query
   * @param {String} opts.employeeType Employee type of users to query
   * @param {Array.<Number>} opts.department the identifier of users departments to query, as id
   * @param {Array.<Number>} opts.businessUnit the identifier of users business units to query, as id
   * @param {Array.<Number>} opts.location the identifier of user location, as id
   * @param {Array.<Number>} opts.reportingManager the identifier of user reporting manager, as id
   * @param {String} opts.employeeId Employee Id of users to query
   * @param {Date} opts.updatedSince the identifier of user updated_since
   * @param {Boolean} opts.draft the identifier of user draft
   * @param {Boolean} opts.deleted the identifier of user deleted
   * @param {Boolean} opts.terminated the identifier of user terminated
   * @param {Number} opts.page page number
   * @param {module:model/String} opts.sort Sort By
   * @param {module:model/String} opts.sortType Sort Type
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Employee>}
   */
  getEmployees(opts) {
    return this.getEmployeesWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Send Invite Email
   * Send Invite Email
   * @param {Number} id the employee identifier, as id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Employee} and HTTP response
   */
  sendInviteWithHttpInfo(id) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling sendInvite");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = Employee;
    return this.apiClient.callApi(
      "/employees/{id}/send_invite",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Send Invite Email
   * Send Invite Email
   * @param {Number} id the employee identifier, as id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Employee}
   */
  sendInvite(id) {
    return this.sendInviteWithHttpInfo(id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update an Employee
   * Update an Employee
   * @param {module:model/EmployeeCreate} employee
   * @param {Number} id the employee identifier, as id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Employee} and HTTP response
   */
  updateEmployeeWithHttpInfo(employee, id) {
    let postBody = employee;
    // verify the required parameter 'employee' is set
    if (employee === undefined || employee === null) {
      throw new Error("Missing the required parameter 'employee' when calling updateEmployee");
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateEmployee");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Employee;
    return this.apiClient.callApi(
      "/employees/{id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update an Employee
   * Update an Employee
   * @param {module:model/EmployeeCreate} employee
   * @param {Number} id the employee identifier, as id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Employee}
   */
  updateEmployee(employee, id) {
    return this.updateEmployeeWithHttpInfo(employee, id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
