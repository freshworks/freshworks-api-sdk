/**
 * Freshteam Public APIs
 * Freshteam public APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freshteam.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ApplicantComment from "../model/ApplicantComment";
import ApplicantCommentCreate from "../model/ApplicantCommentCreate";
import InlineResponse400 from "../model/InlineResponse400";
import InlineResponse401 from "../model/InlineResponse401";
import InlineResponse403 from "../model/InlineResponse403";
import InlineResponse422 from "../model/InlineResponse422";
import InlineResponse500 from "../model/InlineResponse500";

/**
 * ApplicantComment service.
 * @module api/ApplicantCommentApi
 * @version 1.0.0
 */
export default class ApplicantCommentApi {
  /**
   * Constructs a new ApplicantCommentApi.
   * @alias module:api/ApplicantCommentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create an Applicant Comment
   * Create an Applicant Comment
   * @param {module:model/ApplicantCommentCreate} applicant_comment
   * @param {Number} id the applicant identifier, as id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicantComment} and HTTP response
   */
  createApplicantCommentWithHttpInfo(applicant_comment, id) {
    let postBody = applicant_comment;
    // verify the required parameter 'applicant_comment' is set
    if (applicant_comment === undefined || applicant_comment === null) {
      throw new Error("Missing the required parameter 'applicant_comment' when calling createApplicantComment");
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling createApplicantComment");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["ApiKeyAuth"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = ApplicantComment;
    return this.apiClient.callApi(
      "/applicants/{id}/comments",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create an Applicant Comment
   * Create an Applicant Comment
   * @param {module:model/ApplicantCommentCreate} applicant_comment
   * @param {Number} id the applicant identifier, as id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicantComment}
   */
  createApplicantComment(applicant_comment, id) {
    return this.createApplicantCommentWithHttpInfo(applicant_comment, id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
