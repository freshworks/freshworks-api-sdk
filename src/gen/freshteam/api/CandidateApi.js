/**
 * Freshteam Public APIs
 * Freshteam public APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freshteam.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Candidate from "../model/Candidate";
import CandidateCreate from "../model/CandidateCreate";
import InlineResponse400 from "../model/InlineResponse400";
import InlineResponse401 from "../model/InlineResponse401";
import InlineResponse403 from "../model/InlineResponse403";
import InlineResponse404 from "../model/InlineResponse404";
import InlineResponse422 from "../model/InlineResponse422";
import InlineResponse500 from "../model/InlineResponse500";
import Model500Error from "../model/Model500Error";

/**
 * Candidate service.
 * @module api/CandidateApi
 * @version 1.0.0
 */
export default class CandidateApi {
  /**
   * Constructs a new CandidateApi.
   * @alias module:api/CandidateApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Details of a candidate
   * Get the details of a candidate
   * @param {Number} id The candidate identifier, as id
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.include Additional Properties to include in response
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Candidate} and HTTP response
   */
  getCandidateWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getCandidate");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {
      include: this.apiClient.buildCollectionParam(opts["include"], "csv")
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Candidate;
    return this.apiClient.callApi(
      "/candidates/{id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Details of a candidate
   * Get the details of a candidate
   * @param {Number} id The candidate identifier, as id
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.include Additional Properties to include in response
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Candidate}
   */
  getCandidate(id, opts) {
    return this.getCandidateWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a Candidate
   * Update a Candidate
   * @param {module:model/CandidateCreate} candidate
   * @param {Number} id the candidate identifier, as id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Candidate} and HTTP response
   */
  updateCandidateWithHttpInfo(candidate, id) {
    let postBody = candidate;
    // verify the required parameter 'candidate' is set
    if (candidate === undefined || candidate === null) {
      throw new Error("Missing the required parameter 'candidate' when calling updateCandidate");
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateCandidate");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["ApiKeyAuth"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Candidate;
    return this.apiClient.callApi(
      "/candidates/{id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a Candidate
   * Update a Candidate
   * @param {module:model/CandidateCreate} candidate
   * @param {Number} id the candidate identifier, as id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Candidate}
   */
  updateCandidate(candidate, id) {
    return this.updateCandidateWithHttpInfo(candidate, id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
