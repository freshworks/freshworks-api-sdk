/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BadRequest from "../model/BadRequest";
import CreatePurchaseOrderPost201Response from "../model/CreatePurchaseOrderPost201Response";
import Forbidden from "../model/Forbidden";
import InternalServerError from "../model/InternalServerError";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListPurchaseOrders200Response from "../model/ListPurchaseOrders200Response";
import PurchaseOrder from "../model/PurchaseOrder";
import RateLimitError from "../model/RateLimitError";

/**
 * PurchaseOrders service.
 * @module api/PurchaseOrdersApi
 * @version 1.0.0
 */
export default class PurchaseOrdersApi {
  /**
   * Constructs a new PurchaseOrdersApi.
   * @alias module:api/PurchaseOrdersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create a new Purchase Order in Freshservice
   * Create a new Purchase Order in Freshservice
   * @param {module:model/PurchaseOrder} purchase_order
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePurchaseOrderPost201Response} and HTTP response
   */
  createPurchaseOrderPostWithHttpInfo(purchase_order) {
    let postBody = purchase_order;
    // verify the required parameter 'purchase_order' is set
    if (purchase_order === undefined || purchase_order === null) {
      throw new Error("Missing the required parameter 'purchase_order' when calling createPurchaseOrderPost");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreatePurchaseOrderPost201Response;
    return this.apiClient.callApi(
      "/api/v2/purchase_orders",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a new Purchase Order in Freshservice
   * Create a new Purchase Order in Freshservice
   * @param {module:model/PurchaseOrder} purchase_order
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePurchaseOrderPost201Response}
   */
  createPurchaseOrderPost(purchase_order) {
    return this.createPurchaseOrderPostWithHttpInfo(purchase_order).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a purchase order
   * Delete the purchase order with the given ID from Freshservice
   * @param {Number} purchase_order_id ID of purchase order to delete
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deletePurchaseOrderWithHttpInfo(purchase_order_id) {
    let postBody = null;
    // verify the required parameter 'purchase_order_id' is set
    if (purchase_order_id === undefined || purchase_order_id === null) {
      throw new Error("Missing the required parameter 'purchase_order_id' when calling deletePurchaseOrder");
    }

    let pathParams = {
      purchase_order_id: purchase_order_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/purchase_orders/{purchase_order_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a purchase order
   * Delete the purchase order with the given ID from Freshservice
   * @param {Number} purchase_order_id ID of purchase order to delete
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deletePurchaseOrder(purchase_order_id) {
    return this.deletePurchaseOrderWithHttpInfo(purchase_order_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Retrieve an existing Purchase Order
   * Retrieve an existing Purchase Order
   * @param {Number} purchase_order_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePurchaseOrderPost201Response} and HTTP response
   */
  getPurchaseOrderWithHttpInfo(purchase_order_id) {
    let postBody = null;
    // verify the required parameter 'purchase_order_id' is set
    if (purchase_order_id === undefined || purchase_order_id === null) {
      throw new Error("Missing the required parameter 'purchase_order_id' when calling getPurchaseOrder");
    }

    let pathParams = {
      purchase_order_id: purchase_order_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreatePurchaseOrderPost201Response;
    return this.apiClient.callApi(
      "/api/v2/purchase_orders/{purchase_order_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Retrieve an existing Purchase Order
   * Retrieve an existing Purchase Order
   * @param {Number} purchase_order_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePurchaseOrderPost201Response}
   */
  getPurchaseOrder(purchase_order_id) {
    return this.getPurchaseOrderWithHttpInfo(purchase_order_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Purchase Orders
   * Get a list of all Purchase Orders in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPurchaseOrders200Response} and HTTP response
   */
  listPurchaseOrdersWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListPurchaseOrders200Response;
    return this.apiClient.callApi(
      "/api/v2/purchase_orders",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Purchase Orders
   * Get a list of all Purchase Orders in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPurchaseOrders200Response}
   */
  listPurchaseOrders(opts) {
    return this.listPurchaseOrdersWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update an existing Purchase Order
   * Update an existing Purchase Order
   * @param {module:model/PurchaseOrder} product
   * @param {Number} purchase_order_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePurchaseOrderPost201Response} and HTTP response
   */
  updatePurchaseOrderWithHttpInfo(product, purchase_order_id) {
    let postBody = product;
    // verify the required parameter 'product' is set
    if (product === undefined || product === null) {
      throw new Error("Missing the required parameter 'product' when calling updatePurchaseOrder");
    }
    // verify the required parameter 'purchase_order_id' is set
    if (purchase_order_id === undefined || purchase_order_id === null) {
      throw new Error("Missing the required parameter 'purchase_order_id' when calling updatePurchaseOrder");
    }

    let pathParams = {
      purchase_order_id: purchase_order_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreatePurchaseOrderPost201Response;
    return this.apiClient.callApi(
      "/api/v2/purchase_orders/{purchase_order_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update an existing Purchase Order
   * Update an existing Purchase Order
   * @param {module:model/PurchaseOrder} product
   * @param {Number} purchase_order_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePurchaseOrderPost201Response}
   */
  updatePurchaseOrder(product, purchase_order_id) {
    return this.updatePurchaseOrderWithHttpInfo(product, purchase_order_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
