/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CannedResponse from "../model/CannedResponse";
import CreateCannedResponse201Response from "../model/CreateCannedResponse201Response";
import GetCannedResponse200Response from "../model/GetCannedResponse200Response";
import ListCannedResponses200Response from "../model/ListCannedResponses200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";

/**
 * CannedResponses service.
 * @module api/CannedResponsesApi
 * @version 2.0.1
 */
export default class CannedResponsesApi {
  /**
   * Constructs a new CannedResponsesApi.
   * @alias module:api/CannedResponsesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Canned Response
   * Create a new Canned Response request in Freshservice
   * @param {module:model/CannedResponse} canned_response Details of the Canned Response
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCannedResponse201Response} and HTTP response
   */
  createCannedResponseWithHttpInfo(canned_response) {
    let postBody = canned_response;
    // verify the required parameter 'canned_response' is set
    if (canned_response === undefined || canned_response === null) {
      throw new Error("Missing the required parameter 'canned_response' when calling createCannedResponse");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateCannedResponse201Response;
    return this.apiClient.callApi(
      "/api/v2/canned_responses",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Canned Response
   * Create a new Canned Response request in Freshservice
   * @param {module:model/CannedResponse} canned_response Details of the Canned Response
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCannedResponse201Response}
   */
  createCannedResponse(canned_response) {
    return this.createCannedResponseWithHttpInfo(canned_response).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Canned Response
   * Delete the Canned Response with the given ID from Freshservice
   * @param {Number} canned_response_id ID of canned response to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteCannedResponseWithHttpInfo(canned_response_id) {
    let postBody = null;
    // verify the required parameter 'canned_response_id' is set
    if (canned_response_id === undefined || canned_response_id === null) {
      throw new Error("Missing the required parameter 'canned_response_id' when calling deleteCannedResponse");
    }

    let pathParams = {
      canned_response_id: canned_response_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/canned_response/{canned_response_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Canned Response
   * Delete the Canned Response with the given ID from Freshservice
   * @param {Number} canned_response_id ID of canned response to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteCannedResponse(canned_response_id) {
    return this.deleteCannedResponseWithHttpInfo(canned_response_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Canned Response
   * Retrieve the Canned Response with the given ID from Freshservice
   * @param {Number} canned_response_id ID of Canned Response to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCannedResponse200Response} and HTTP response
   */
  getCannedResponseWithHttpInfo(canned_response_id) {
    let postBody = null;
    // verify the required parameter 'canned_response_id' is set
    if (canned_response_id === undefined || canned_response_id === null) {
      throw new Error("Missing the required parameter 'canned_response_id' when calling getCannedResponse");
    }

    let pathParams = {
      canned_response_id: canned_response_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetCannedResponse200Response;
    return this.apiClient.callApi(
      "/api/v2/canned_response/{canned_response_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Canned Response
   * Retrieve the Canned Response with the given ID from Freshservice
   * @param {Number} canned_response_id ID of Canned Response to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCannedResponse200Response}
   */
  getCannedResponse(canned_response_id) {
    return this.getCannedResponseWithHttpInfo(canned_response_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Canned Responses
   * Retrieve a list of all Canned Responses in Freshservice
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCannedResponses200Response} and HTTP response
   */
  listCannedResponsesWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListCannedResponses200Response;
    return this.apiClient.callApi(
      "/api/v2/canned_responses",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Canned Responses
   * Retrieve a list of all Canned Responses in Freshservice
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCannedResponses200Response}
   */
  listCannedResponses() {
    return this.listCannedResponsesWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Canned Response
   * Update an existing Canned Response in Freshservice
   * @param {module:model/CannedResponse} canned_response Canned Response details that needs to be updated
   * @param {Number} canned_response_id ID of canned response to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCannedResponse201Response} and HTTP response
   */
  updateCannedResponseWithHttpInfo(canned_response, canned_response_id) {
    let postBody = canned_response;
    // verify the required parameter 'canned_response' is set
    if (canned_response === undefined || canned_response === null) {
      throw new Error("Missing the required parameter 'canned_response' when calling updateCannedResponse");
    }
    // verify the required parameter 'canned_response_id' is set
    if (canned_response_id === undefined || canned_response_id === null) {
      throw new Error("Missing the required parameter 'canned_response_id' when calling updateCannedResponse");
    }

    let pathParams = {
      canned_response_id: canned_response_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateCannedResponse201Response;
    return this.apiClient.callApi(
      "/api/v2/canned_response/{canned_response_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Canned Response
   * Update an existing Canned Response in Freshservice
   * @param {module:model/CannedResponse} canned_response Canned Response details that needs to be updated
   * @param {Number} canned_response_id ID of canned response to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCannedResponse201Response}
   */
  updateCannedResponse(canned_response, canned_response_id) {
    return this.updateCannedResponseWithHttpInfo(canned_response, canned_response_id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
