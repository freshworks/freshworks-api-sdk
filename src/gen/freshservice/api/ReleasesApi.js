/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateChangeNote201Response from "../model/CreateChangeNote201Response";
import CreateRelease201Response from "../model/CreateRelease201Response";
import CreateTicketTask201Response from "../model/CreateTicketTask201Response";
import CreateTicketTimeEntry201Response from "../model/CreateTicketTimeEntry201Response";
import ListChangeNotes200Response from "../model/ListChangeNotes200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListReleaseFormFields200Response from "../model/ListReleaseFormFields200Response";
import ListReleases200Response from "../model/ListReleases200Response";
import ListTicketTasks200Response from "../model/ListTicketTasks200Response";
import ListTicketTimeEntries200Response from "../model/ListTicketTimeEntries200Response";
import Note from "../model/Note";
import Release from "../model/Release";
import Task from "../model/Task";
import TimeEntry from "../model/TimeEntry";

/**
 * Releases service.
 * @module api/ReleasesApi
 * @version 1.0.0
 */
export default class ReleasesApi {
  /**
   * Constructs a new ReleasesApi.
   * @alias module:api/ReleasesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Release
   * Create a new Release request in Freshservice
   * @param {module:model/Release} release Details of the Release
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRelease201Response} and HTTP response
   */
  createReleaseWithHttpInfo(release) {
    let postBody = release;
    // verify the required parameter 'release' is set
    if (release === undefined || release === null) {
      throw new Error("Missing the required parameter 'release' when calling createRelease");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateRelease201Response;
    return this.apiClient.callApi(
      "/api/v2/releases",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Release
   * Create a new Release request in Freshservice
   * @param {module:model/Release} release Details of the Release
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRelease201Response}
   */
  createRelease(release) {
    return this.createReleaseWithHttpInfo(release).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Note on a release
   * Create a new note on a release in freshservice
   * @param {module:model/Note} note Note content of release
   * @param {Number} release_id ID of release for which notes are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  createReleaseNoteWithHttpInfo(note, release_id) {
    let postBody = note;
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error("Missing the required parameter 'note' when calling createReleaseNote");
    }
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling createReleaseNote");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/notes",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Note on a release
   * Create a new note on a release in freshservice
   * @param {module:model/Note} note Note content of release
   * @param {Number} release_id ID of release for which notes are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  createReleaseNote(note, release_id) {
    return this.createReleaseNoteWithHttpInfo(note, release_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Task on a release
   * Create a new task on a release in freshservice
   * @param {module:model/Task} task detailss of task to be created
   * @param {Number} release_id ID of release for which tasks are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  createReleaseTaskWithHttpInfo(task, release_id) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling createReleaseTask");
    }
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling createReleaseTask");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/tasks",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Task on a release
   * Create a new task on a release in freshservice
   * @param {module:model/Task} task detailss of task to be created
   * @param {Number} release_id ID of release for which tasks are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  createReleaseTask(task, release_id) {
    return this.createReleaseTaskWithHttpInfo(task, release_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create time entry on a release
   * Create a new time entry on a release in freshservice
   * @param {module:model/TimeEntry} time_entry details of time entry to be created
   * @param {Number} release_id ID of release for which time entries are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  createReleaseTimeEntryWithHttpInfo(time_entry, release_id) {
    let postBody = time_entry;
    // verify the required parameter 'time_entry' is set
    if (time_entry === undefined || time_entry === null) {
      throw new Error("Missing the required parameter 'time_entry' when calling createReleaseTimeEntry");
    }
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling createReleaseTimeEntry");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/time_entries",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create time entry on a release
   * Create a new time entry on a release in freshservice
   * @param {module:model/TimeEntry} time_entry details of time entry to be created
   * @param {Number} release_id ID of release for which time entries are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  createReleaseTimeEntry(time_entry, release_id) {
    return this.createReleaseTimeEntryWithHttpInfo(time_entry, release_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Release
   * Delete the Release with the given ID from Freshservice
   * @param {Number} release_id ID of release to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteReleaseWithHttpInfo(release_id) {
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling deleteRelease");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/release/{release_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Release
   * Delete the Release with the given ID from Freshservice
   * @param {Number} release_id ID of release to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteRelease(release_id) {
    return this.deleteReleaseWithHttpInfo(release_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete note on a release
   * Delete the note on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} note_id ID of note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteReleaseNoteWithHttpInfo(release_id, note_id) {
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling deleteReleaseNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling deleteReleaseNote");
    }

    let pathParams = {
      release_id: release_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/notes/{note_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete note on a release
   * Delete the note on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} note_id ID of note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteReleaseNote(release_id, note_id) {
    return this.deleteReleaseNoteWithHttpInfo(release_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete task on a release
   * Delete the task on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} task_id ID of task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteReleaseTaskWithHttpInfo(release_id, task_id) {
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling deleteReleaseTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling deleteReleaseTask");
    }

    let pathParams = {
      release_id: release_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/tasks/{task_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete task on a release
   * Delete the task on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} task_id ID of task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteReleaseTask(release_id, task_id) {
    return this.deleteReleaseTaskWithHttpInfo(release_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a time entry on a release
   * Delete the time entry on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteReleaseTimeEntryWithHttpInfo(release_id, time_entry_id) {
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling deleteReleaseTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling deleteReleaseTimeEntry");
    }

    let pathParams = {
      release_id: release_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/time_entries/{time_entry_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a time entry on a release
   * Delete the time entry on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteReleaseTimeEntry(release_id, time_entry_id) {
    return this.deleteReleaseTimeEntryWithHttpInfo(release_id, time_entry_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Release
   * Retrieve the Release with the given ID from Freshservice
   * @param {Number} release_id ID of Release to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRelease201Response} and HTTP response
   */
  getReleaseWithHttpInfo(release_id) {
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling getRelease");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateRelease201Response;
    return this.apiClient.callApi(
      "/api/v2/release/{release_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Release
   * Retrieve the Release with the given ID from Freshservice
   * @param {Number} release_id ID of Release to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRelease201Response}
   */
  getRelease(release_id) {
    return this.getReleaseWithHttpInfo(release_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View note on a release
   * Retrieve a note on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  getReleaseNoteWithHttpInfo(release_id, note_id) {
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling getReleaseNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling getReleaseNote");
    }

    let pathParams = {
      release_id: release_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/notes/{note_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View note on a release
   * Retrieve a note on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  getReleaseNote(release_id, note_id) {
    return this.getReleaseNoteWithHttpInfo(release_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View task on a release
   * Retrieve a task on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  getReleaseTaskWithHttpInfo(release_id, task_id) {
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling getReleaseTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling getReleaseTask");
    }

    let pathParams = {
      release_id: release_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/tasks/{task_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View task on a release
   * Retrieve a task on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  getReleaseTask(release_id, task_id) {
    return this.getReleaseTaskWithHttpInfo(release_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View time entry on a release
   * Retrieve a time entry on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  getReleaseTimeEntryWithHttpInfo(release_id, time_entry_id) {
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling getReleaseTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling getReleaseTimeEntry");
    }

    let pathParams = {
      release_id: release_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/time_entries/{time_entry_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View time entry on a release
   * Retrieve a time entry on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  getReleaseTimeEntry(release_id, time_entry_id) {
    return this.getReleaseTimeEntryWithHttpInfo(release_id, time_entry_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Release Fields
   * Retrieve all the Fields that constitute the Release Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListReleaseFormFields200Response} and HTTP response
   */
  listReleaseFormFieldsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListReleaseFormFields200Response;
    return this.apiClient.callApi(
      "/api/v2/release_form_fields",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Release Fields
   * Retrieve all the Fields that constitute the Release Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListReleaseFormFields200Response}
   */
  listReleaseFormFields() {
    return this.listReleaseFormFieldsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View notes on release
   * Retrieve the notes on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release for which notes are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of notes to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListChangeNotes200Response} and HTTP response
   */
  listReleaseNoteWithHttpInfo(release_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling listReleaseNote");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListChangeNotes200Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/notes",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View notes on release
   * Retrieve the notes on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release for which notes are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of notes to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListChangeNotes200Response}
   */
  listReleaseNote(release_id, opts) {
    return this.listReleaseNoteWithHttpInfo(release_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View tasks on release
   * Retrieve the tasks on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release for which tasks are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of tasks to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketTasks200Response} and HTTP response
   */
  listReleaseTasksWithHttpInfo(release_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling listReleaseTasks");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketTasks200Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/tasks",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View tasks on release
   * Retrieve the tasks on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release for which tasks are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of tasks to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketTasks200Response}
   */
  listReleaseTasks(release_id, opts) {
    return this.listReleaseTasksWithHttpInfo(release_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View time entries on release
   * Retrieve the time entries on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release for which time entries are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of time entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketTimeEntries200Response} and HTTP response
   */
  listReleaseTimeEntriesWithHttpInfo(release_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling listReleaseTimeEntries");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketTimeEntries200Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/time_entries",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View time entries on release
   * Retrieve the time entries on a Release with the given ID from Freshservice
   * @param {Number} release_id ID of release for which time entries are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of time entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketTimeEntries200Response}
   */
  listReleaseTimeEntries(release_id, opts) {
    return this.listReleaseTimeEntriesWithHttpInfo(release_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Releases
   * Retrieve a list of all Releases in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Date} opts.updated_since Retrieve the releases by when it was last updated
   * @param {Number} opts.per_page The number of releases to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListReleases200Response} and HTTP response
   */
  listReleasesWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      updated_since: opts["updated_since"],
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListReleases200Response;
    return this.apiClient.callApi(
      "/api/v2/releases",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Releases
   * Retrieve a list of all Releases in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Date} opts.updated_since Retrieve the releases by when it was last updated
   * @param {Number} opts.per_page The number of releases to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListReleases200Response}
   */
  listReleases(opts) {
    return this.listReleasesWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Release
   * Update an existing Release in Freshservice
   * @param {module:model/Release} release Release details that needs to be updated
   * @param {Number} release_id ID of release to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRelease201Response} and HTTP response
   */
  updateReleaseWithHttpInfo(release, release_id) {
    let postBody = release;
    // verify the required parameter 'release' is set
    if (release === undefined || release === null) {
      throw new Error("Missing the required parameter 'release' when calling updateRelease");
    }
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling updateRelease");
    }

    let pathParams = {
      release_id: release_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateRelease201Response;
    return this.apiClient.callApi(
      "/api/v2/release/{release_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Release
   * Update an existing Release in Freshservice
   * @param {module:model/Release} release Release details that needs to be updated
   * @param {Number} release_id ID of release to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRelease201Response}
   */
  updateRelease(release, release_id) {
    return this.updateReleaseWithHttpInfo(release, release_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a note on a release
   * Update an existing note on an existing Release in Freshservice
   * @param {module:model/Note} note note details that needs to be updated
   * @param {Number} release_id ID of release
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  updateReleaseNoteWithHttpInfo(note, release_id, note_id) {
    let postBody = note;
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error("Missing the required parameter 'note' when calling updateReleaseNote");
    }
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling updateReleaseNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling updateReleaseNote");
    }

    let pathParams = {
      release_id: release_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/notes/{note_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a note on a release
   * Update an existing note on an existing Release in Freshservice
   * @param {module:model/Note} note note details that needs to be updated
   * @param {Number} release_id ID of release
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  updateReleaseNote(note, release_id, note_id) {
    return this.updateReleaseNoteWithHttpInfo(note, release_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a task on a release
   * Update an existing task on an existing Release in Freshservice
   * @param {module:model/Task} task tassk details that needs to be updated
   * @param {Number} release_id ID of release
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  updateReleaseTaskWithHttpInfo(task, release_id, task_id) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling updateReleaseTask");
    }
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling updateReleaseTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling updateReleaseTask");
    }

    let pathParams = {
      release_id: release_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/tasks/{task_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a task on a release
   * Update an existing task on an existing Release in Freshservice
   * @param {module:model/Task} task tassk details that needs to be updated
   * @param {Number} release_id ID of release
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  updateReleaseTask(task, release_id, task_id) {
    return this.updateReleaseTaskWithHttpInfo(task, release_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a time entry on a release
   * Update an existing time entry on an existing Release in Freshservice
   * @param {module:model/TimeEntry} time_entry time entry details that needs to be updated
   * @param {Number} release_id ID of release
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  updateReleaseTimeEntryWithHttpInfo(time_entry, release_id, time_entry_id) {
    let postBody = time_entry;
    // verify the required parameter 'time_entry' is set
    if (time_entry === undefined || time_entry === null) {
      throw new Error("Missing the required parameter 'time_entry' when calling updateReleaseTimeEntry");
    }
    // verify the required parameter 'release_id' is set
    if (release_id === undefined || release_id === null) {
      throw new Error("Missing the required parameter 'release_id' when calling updateReleaseTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling updateReleaseTimeEntry");
    }

    let pathParams = {
      release_id: release_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/releases/{release_id}/time_entries/{time_entry_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a time entry on a release
   * Update an existing time entry on an existing Release in Freshservice
   * @param {module:model/TimeEntry} time_entry time entry details that needs to be updated
   * @param {Number} release_id ID of release
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  updateReleaseTimeEntry(time_entry, release_id, time_entry_id) {
    return this.updateReleaseTimeEntryWithHttpInfo(time_entry, release_id, time_entry_id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
