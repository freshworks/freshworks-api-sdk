/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateProject201Response from "../model/CreateProject201Response";
import CreateProjectTask201Response from "../model/CreateProjectTask201Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListProjectTasks200Response from "../model/ListProjectTasks200Response";
import ListProjects200Response from "../model/ListProjects200Response";
import Project from "../model/Project";
import ProjectTask from "../model/ProjectTask";

/**
 * Projects service.
 * @module api/ProjectsApi
 * @version 1.0.0
 */
export default class ProjectsApi {
  /**
   * Constructs a new ProjectsApi.
   * @alias module:api/ProjectsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Archive Project
   * Archive an existing Project in Freshservice
   * @param {Number} id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProject201Response} and HTTP response
   */
  archiveProjectWithHttpInfo(id) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling archiveProject");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateProject201Response;
    return this.apiClient.callApi(
      "/api/v2/projects/{id}/archive",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Archive Project
   * Archive an existing Project in Freshservice
   * @param {Number} id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProject201Response}
   */
  archiveProject(id) {
    return this.archiveProjectWithHttpInfo(id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Project
   * Create a new Project in Freshservice
   * @param {module:model/Project} project project that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProject201Response} and HTTP response
   */
  createProjectWithHttpInfo(project) {
    let postBody = project;
    // verify the required parameter 'project' is set
    if (project === undefined || project === null) {
      throw new Error("Missing the required parameter 'project' when calling createProject");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateProject201Response;
    return this.apiClient.callApi(
      "/api/v2/projects",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Project
   * Create a new Project in Freshservice
   * @param {module:model/Project} project project that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProject201Response}
   */
  createProject(project) {
    return this.createProjectWithHttpInfo(project).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Project Task
   * Create a new Project Task in Freshservice
   * @param {module:model/ProjectTask} project_task project task that needs to be created
   * @param {Number} id ID of project to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProjectTask201Response} and HTTP response
   */
  createProjectTaskWithHttpInfo(project_task, id) {
    let postBody = project_task;
    // verify the required parameter 'project_task' is set
    if (project_task === undefined || project_task === null) {
      throw new Error("Missing the required parameter 'project_task' when calling createProjectTask");
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling createProjectTask");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateProjectTask201Response;
    return this.apiClient.callApi(
      "/api/v2/projects/{id}/tasks",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Project Task
   * Create a new Project Task in Freshservice
   * @param {module:model/ProjectTask} project_task project task that needs to be created
   * @param {Number} id ID of project to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProjectTask201Response}
   */
  createProjectTask(project_task, id) {
    return this.createProjectTaskWithHttpInfo(project_task, id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Project
   * Delete an existing Project in Freshservice
   * @param {Number} project_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProjectWithHttpInfo(project_id) {
    let postBody = null;
    // verify the required parameter 'project_id' is set
    if (project_id === undefined || project_id === null) {
      throw new Error("Missing the required parameter 'project_id' when calling deleteProject");
    }

    let pathParams = {
      project_id: project_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/projects/{project_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Project
   * Delete an existing Project in Freshservice
   * @param {Number} project_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProject(project_id) {
    return this.deleteProjectWithHttpInfo(project_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a  Project Task
   * Delete an existing Project Task in Freshservice
   * @param {Number} project_id ID of project to retrieve
   * @param {Number} id ID of the task to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProjectTaskWithHttpInfo(project_id, id) {
    let postBody = null;
    // verify the required parameter 'project_id' is set
    if (project_id === undefined || project_id === null) {
      throw new Error("Missing the required parameter 'project_id' when calling deleteProjectTask");
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteProjectTask");
    }

    let pathParams = {
      project_id: project_id,
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/projects/{project_id}/tasks/{id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a  Project Task
   * Delete an existing Project Task in Freshservice
   * @param {Number} project_id ID of project to retrieve
   * @param {Number} id ID of the task to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProjectTask(project_id, id) {
    return this.deleteProjectTaskWithHttpInfo(project_id, id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Project
   * Retrieve the Project with the given ID from Freshservice
   * @param {Number} project_id ID of project to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProject201Response} and HTTP response
   */
  getProjectWithHttpInfo(project_id) {
    let postBody = null;
    // verify the required parameter 'project_id' is set
    if (project_id === undefined || project_id === null) {
      throw new Error("Missing the required parameter 'project_id' when calling getProject");
    }

    let pathParams = {
      project_id: project_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateProject201Response;
    return this.apiClient.callApi(
      "/api/v2/projects/{project_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Project
   * Retrieve the Project with the given ID from Freshservice
   * @param {Number} project_id ID of project to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProject201Response}
   */
  getProject(project_id) {
    return this.getProjectWithHttpInfo(project_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Project Task Details
   * View Project Task Details
   * @param {Number} id Task id
   * @param {Number} project_id Project id of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProjectTask201Response} and HTTP response
   */
  getProjectTaskWithHttpInfo(id, project_id) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getProjectTask");
    }
    // verify the required parameter 'project_id' is set
    if (project_id === undefined || project_id === null) {
      throw new Error("Missing the required parameter 'project_id' when calling getProjectTask");
    }

    let pathParams = {
      id: id,
      project_id: project_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateProjectTask201Response;
    return this.apiClient.callApi(
      "/api/v2/projects/{project_id}/tasks/{id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Project Task Details
   * View Project Task Details
   * @param {Number} id Task id
   * @param {Number} project_id Project id of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProjectTask201Response}
   */
  getProjectTask(id, project_id) {
    return this.getProjectTaskWithHttpInfo(id, project_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Project Tasks
   * Retrieve a list of all Project Tasks in Freshservice
   * @param {Number} id ID of project to retrieve
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @param {module:model/String} opts.filter Task filters (default to 'all')
   * @param {Number} opts.parent_id Task filters
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProjectTasks200Response} and HTTP response
   */
  listProjectTasksWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling listProjectTasks");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"],
      filter: opts["filter"],
      parent_id: opts["parent_id"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListProjectTasks200Response;
    return this.apiClient.callApi(
      "/api/v2/projects/{id}/tasks",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Project Tasks
   * Retrieve a list of all Project Tasks in Freshservice
   * @param {Number} id ID of project to retrieve
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @param {module:model/String} opts.filter Task filters (default to 'all')
   * @param {Number} opts.parent_id Task filters
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProjectTasks200Response}
   */
  listProjectTasks(id, opts) {
    return this.listProjectTasksWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Projects
   * Retrieve a list of all Projects in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @param {module:model/String} opts.status Filter to be applied in retrieving projects (default to 'all')
   * @param {module:model/Boolean} opts.archived Filter archived or active projects (default to false)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProjects200Response} and HTTP response
   */
  listProjectsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"],
      status: opts["status"],
      archived: opts["archived"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListProjects200Response;
    return this.apiClient.callApi(
      "/api/v2/projects",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Projects
   * Retrieve a list of all Projects in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @param {module:model/String} opts.status Filter to be applied in retrieving projects (default to 'all')
   * @param {module:model/Boolean} opts.archived Filter archived or active projects (default to false)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProjects200Response}
   */
  listProjects(opts) {
    return this.listProjectsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Restore Project
   * Restore an archived Project in Freshservice
   * @param {Number} id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProject201Response} and HTTP response
   */
  restoreProjectWithHttpInfo(id) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling restoreProject");
    }

    let pathParams = {
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateProject201Response;
    return this.apiClient.callApi(
      "/api/v2/projects/{id}/restore",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Restore Project
   * Restore an archived Project in Freshservice
   * @param {Number} id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProject201Response}
   */
  restoreProject(id) {
    return this.restoreProjectWithHttpInfo(id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Project
   * Update an existing Project in Freshservice
   * @param {module:model/Project} project project that needs to be updated
   * @param {Number} project_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProject201Response} and HTTP response
   */
  updateProjectWithHttpInfo(project, project_id) {
    let postBody = project;
    // verify the required parameter 'project' is set
    if (project === undefined || project === null) {
      throw new Error("Missing the required parameter 'project' when calling updateProject");
    }
    // verify the required parameter 'project_id' is set
    if (project_id === undefined || project_id === null) {
      throw new Error("Missing the required parameter 'project_id' when calling updateProject");
    }

    let pathParams = {
      project_id: project_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateProject201Response;
    return this.apiClient.callApi(
      "/api/v2/projects/{project_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Project
   * Update an existing Project in Freshservice
   * @param {module:model/Project} project project that needs to be updated
   * @param {Number} project_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProject201Response}
   */
  updateProject(project, project_id) {
    return this.updateProjectWithHttpInfo(project, project_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a  Project Task
   * Update an existing Project Task in Freshservice
   * @param {Number} project_id ID of project to retrieve
   * @param {Number} id ID of the task to be updated
   * @param {Object} opts Optional parameters
   * @param {module:model/ProjectTask} opts.project_task project task that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProjectTask201Response} and HTTP response
   */
  updateProjectTaskWithHttpInfo(project_id, id, opts) {
    opts = opts || {};
    let postBody = opts["project_task"];
    // verify the required parameter 'project_id' is set
    if (project_id === undefined || project_id === null) {
      throw new Error("Missing the required parameter 'project_id' when calling updateProjectTask");
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateProjectTask");
    }

    let pathParams = {
      project_id: project_id,
      id: id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateProjectTask201Response;
    return this.apiClient.callApi(
      "/api/v2/projects/{project_id}/tasks/{id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a  Project Task
   * Update an existing Project Task in Freshservice
   * @param {Number} project_id ID of project to retrieve
   * @param {Number} id ID of the task to be updated
   * @param {Object} opts Optional parameters
   * @param {module:model/ProjectTask} opts.project_task project task that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProjectTask201Response}
   */
  updateProjectTask(project_id, id, opts) {
    return this.updateProjectTaskWithHttpInfo(project_id, id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
