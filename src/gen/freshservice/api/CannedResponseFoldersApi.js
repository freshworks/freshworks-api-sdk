/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CannedResponseFolder from "../model/CannedResponseFolder";
import CreateCannedResponse201Response from "../model/CreateCannedResponse201Response";
import CreateCannedResponseFolder201Response from "../model/CreateCannedResponseFolder201Response";
import ListCannedResponseFolders200Response from "../model/ListCannedResponseFolders200Response";
import ListCannedResponses200Response from "../model/ListCannedResponses200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import UpdateCannedResponseFolder200Response from "../model/UpdateCannedResponseFolder200Response";

/**
 * CannedResponseFolders service.
 * @module api/CannedResponseFoldersApi
 * @version 2.0.1
 */
export default class CannedResponseFoldersApi {
  /**
   * Constructs a new CannedResponseFoldersApi.
   * @alias module:api/CannedResponseFoldersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Canned Response Folder
   * Create a new Canned Response Folder request in Freshservice
   * @param {module:model/CannedResponseFolder} canned_response Details of the Canned Response Folder
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCannedResponseFolder201Response} and HTTP response
   */
  createCannedResponseFolderWithHttpInfo(canned_response) {
    let postBody = canned_response;
    // verify the required parameter 'canned_response' is set
    if (canned_response === undefined || canned_response === null) {
      throw new Error("Missing the required parameter 'canned_response' when calling createCannedResponseFolder");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateCannedResponseFolder201Response;
    return this.apiClient.callApi(
      "/api/v2/canned_response_folders",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Canned Response Folder
   * Create a new Canned Response Folder request in Freshservice
   * @param {module:model/CannedResponseFolder} canned_response Details of the Canned Response Folder
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCannedResponseFolder201Response}
   */
  createCannedResponseFolder(canned_response) {
    return this.createCannedResponseFolderWithHttpInfo(canned_response).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Canned Response Folder
   * Delete the Canned Response Folder with the given ID from Freshservice
   * @param {Number} canned_response_folder_id ID of canned response folder to delete
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteCanedResponseFolderWithHttpInfo(canned_response_folder_id) {
    let postBody = null;
    // verify the required parameter 'canned_response_folder_id' is set
    if (canned_response_folder_id === undefined || canned_response_folder_id === null) {
      throw new Error(
        "Missing the required parameter 'canned_response_folder_id' when calling deleteCanedResponseFolder"
      );
    }

    let pathParams = {
      canned_response_folder_id: canned_response_folder_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/canned_response_folder/{canned_response_folder_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Canned Response Folder
   * Delete the Canned Response Folder with the given ID from Freshservice
   * @param {Number} canned_response_folder_id ID of canned response folder to delete
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteCanedResponseFolder(canned_response_folder_id) {
    return this.deleteCanedResponseFolderWithHttpInfo(canned_response_folder_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Canned Response Folder
   * Retrieve the Canned Response Folder with the given ID from Freshservice
   * @param {Number} canned_response_folder_id ID of Canned Response to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCannedResponse201Response} and HTTP response
   */
  getCannedResponseFolderWithHttpInfo(canned_response_folder_id) {
    let postBody = null;
    // verify the required parameter 'canned_response_folder_id' is set
    if (canned_response_folder_id === undefined || canned_response_folder_id === null) {
      throw new Error(
        "Missing the required parameter 'canned_response_folder_id' when calling getCannedResponseFolder"
      );
    }

    let pathParams = {
      canned_response_folder_id: canned_response_folder_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateCannedResponse201Response;
    return this.apiClient.callApi(
      "/api/v2/canned_response_folder/{canned_response_folder_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Canned Response Folder
   * Retrieve the Canned Response Folder with the given ID from Freshservice
   * @param {Number} canned_response_folder_id ID of Canned Response to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCannedResponse201Response}
   */
  getCannedResponseFolder(canned_response_folder_id) {
    return this.getCannedResponseFolderWithHttpInfo(canned_response_folder_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Canned Response Folders
   * Retrieve a list of all Canned Responses in Freshservice
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCannedResponseFolders200Response} and HTTP response
   */
  listCannedResponseFoldersWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListCannedResponseFolders200Response;
    return this.apiClient.callApi(
      "/api/v2/canned_response_folders",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Canned Response Folders
   * Retrieve a list of all Canned Responses in Freshservice
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCannedResponseFolders200Response}
   */
  listCannedResponseFolders() {
    return this.listCannedResponseFoldersWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Canned Responses
   * Retrieve a list of all Canned Responses in a Canned Response Folder in Freshservice
   * @param {Number} canned_response_folder_id ID of canned response folder
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCannedResponses200Response} and HTTP response
   */
  listCannedResponseFoldersCannedResponsesWithHttpInfo(canned_response_folder_id) {
    let postBody = null;
    // verify the required parameter 'canned_response_folder_id' is set
    if (canned_response_folder_id === undefined || canned_response_folder_id === null) {
      throw new Error(
        "Missing the required parameter 'canned_response_folder_id' when calling listCannedResponseFoldersCannedResponses"
      );
    }

    let pathParams = {
      canned_response_folder_id: canned_response_folder_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListCannedResponses200Response;
    return this.apiClient.callApi(
      "/api/v2/canned_response_folders/{canned_response_folder_id}/canned_responses",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Canned Responses
   * Retrieve a list of all Canned Responses in a Canned Response Folder in Freshservice
   * @param {Number} canned_response_folder_id ID of canned response folder
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCannedResponses200Response}
   */
  listCannedResponseFoldersCannedResponses(canned_response_folder_id) {
    return this.listCannedResponseFoldersCannedResponsesWithHttpInfo(canned_response_folder_id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Update Canned Response Folder
   * Update an existing Canned Response Folder in Freshservice
   * @param {module:model/CannedResponseFolder} canned_response_folder Canned Response details that needs to be updated
   * @param {Number} canned_response_folder_id ID of canned response Folder to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateCannedResponseFolder200Response} and HTTP response
   */
  updateCannedResponseFolderWithHttpInfo(canned_response_folder, canned_response_folder_id) {
    let postBody = canned_response_folder;
    // verify the required parameter 'canned_response_folder' is set
    if (canned_response_folder === undefined || canned_response_folder === null) {
      throw new Error(
        "Missing the required parameter 'canned_response_folder' when calling updateCannedResponseFolder"
      );
    }
    // verify the required parameter 'canned_response_folder_id' is set
    if (canned_response_folder_id === undefined || canned_response_folder_id === null) {
      throw new Error(
        "Missing the required parameter 'canned_response_folder_id' when calling updateCannedResponseFolder"
      );
    }

    let pathParams = {
      canned_response_folder_id: canned_response_folder_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = UpdateCannedResponseFolder200Response;
    return this.apiClient.callApi(
      "/api/v2/canned_response_folder/{canned_response_folder_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Canned Response Folder
   * Update an existing Canned Response Folder in Freshservice
   * @param {module:model/CannedResponseFolder} canned_response_folder Canned Response details that needs to be updated
   * @param {Number} canned_response_folder_id ID of canned response Folder to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateCannedResponseFolder200Response}
   */
  updateCannedResponseFolder(canned_response_folder, canned_response_folder_id) {
    return this.updateCannedResponseFolderWithHttpInfo(canned_response_folder, canned_response_folder_id).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }
}
