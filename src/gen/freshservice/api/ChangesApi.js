/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Change from "../model/Change";
import CreateChange201Response from "../model/CreateChange201Response";
import CreateChangeNote201Response from "../model/CreateChangeNote201Response";
import CreateTicketTask201Response from "../model/CreateTicketTask201Response";
import CreateTicketTimeEntry201Response from "../model/CreateTicketTimeEntry201Response";
import ListChangeFormFields200Response from "../model/ListChangeFormFields200Response";
import ListChangeNotes200Response from "../model/ListChangeNotes200Response";
import ListChanges200Response from "../model/ListChanges200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListTicketTasks200Response from "../model/ListTicketTasks200Response";
import ListTicketTimeEntries200Response from "../model/ListTicketTimeEntries200Response";
import Note from "../model/Note";
import Task from "../model/Task";
import TimeEntry from "../model/TimeEntry";

/**
 * Changes service.
 * @module api/ChangesApi
 * @version 1.0.0
 */
export default class ChangesApi {
  /**
   * Constructs a new ChangesApi.
   * @alias module:api/ChangesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Change
   * Create a new Change request in Freshservice
   * @param {module:model/Change} change Subject of the change request
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChange201Response} and HTTP response
   */
  createChangeWithHttpInfo(change) {
    let postBody = change;
    // verify the required parameter 'change' is set
    if (change === undefined || change === null) {
      throw new Error("Missing the required parameter 'change' when calling createChange");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateChange201Response;
    return this.apiClient.callApi(
      "/api/v2/changes",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Change
   * Create a new Change request in Freshservice
   * @param {module:model/Change} change Subject of the change request
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChange201Response}
   */
  createChange(change) {
    return this.createChangeWithHttpInfo(change).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Note on a change
   * Create a new note on a change request in freshservice
   * @param {module:model/Note} note Note content of change
   * @param {Number} change_id ID of change request for which notes are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  createChangeNoteWithHttpInfo(note, change_id) {
    let postBody = note;
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error("Missing the required parameter 'note' when calling createChangeNote");
    }
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling createChangeNote");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/notes",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Note on a change
   * Create a new note on a change request in freshservice
   * @param {module:model/Note} note Note content of change
   * @param {Number} change_id ID of change request for which notes are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  createChangeNote(note, change_id) {
    return this.createChangeNoteWithHttpInfo(note, change_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Task on a change
   * Create a new task on a change request in freshservice
   * @param {module:model/Task} task detailss of task to be created
   * @param {Number} change_id ID of change request for which tasks are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  createChangeTaskWithHttpInfo(task, change_id) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling createChangeTask");
    }
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling createChangeTask");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/tasks",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Task on a change
   * Create a new task on a change request in freshservice
   * @param {module:model/Task} task detailss of task to be created
   * @param {Number} change_id ID of change request for which tasks are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  createChangeTask(task, change_id) {
    return this.createChangeTaskWithHttpInfo(task, change_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create time entry on a change
   * Create a new time entry on a change request in freshservice
   * @param {module:model/TimeEntry} time_entry details of time entry to be created
   * @param {Number} change_id ID of change request for which time entries are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  createChangeTimeEntryWithHttpInfo(time_entry, change_id) {
    let postBody = time_entry;
    // verify the required parameter 'time_entry' is set
    if (time_entry === undefined || time_entry === null) {
      throw new Error("Missing the required parameter 'time_entry' when calling createChangeTimeEntry");
    }
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling createChangeTimeEntry");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/time_entries",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create time entry on a change
   * Create a new time entry on a change request in freshservice
   * @param {module:model/TimeEntry} time_entry details of time entry to be created
   * @param {Number} change_id ID of change request for which time entries are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  createChangeTimeEntry(time_entry, change_id) {
    return this.createChangeTimeEntryWithHttpInfo(time_entry, change_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Change request
   * Delete the Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteChangeWithHttpInfo(change_id) {
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling deleteChange");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Change request
   * Delete the Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteChange(change_id) {
    return this.deleteChangeWithHttpInfo(change_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete note on a change
   * Delete the note on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change
   * @param {Number} note_id ID of note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteChangeNoteWithHttpInfo(change_id, note_id) {
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling deleteChangeNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling deleteChangeNote");
    }

    let pathParams = {
      change_id: change_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/notes/{note_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete note on a change
   * Delete the note on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change
   * @param {Number} note_id ID of note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteChangeNote(change_id, note_id) {
    return this.deleteChangeNoteWithHttpInfo(change_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete task on a change
   * Delete the task on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change
   * @param {Number} task_id ID of task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteChangeTaskWithHttpInfo(change_id, task_id) {
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling deleteChangeTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling deleteChangeTask");
    }

    let pathParams = {
      change_id: change_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/tasks/{task_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete task on a change
   * Delete the task on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change
   * @param {Number} task_id ID of task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteChangeTask(change_id, task_id) {
    return this.deleteChangeTaskWithHttpInfo(change_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a time entry on a change
   * Delete the time entry on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteChangeTimeEntryWithHttpInfo(change_id, time_entry_id) {
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling deleteChangeTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling deleteChangeTimeEntry");
    }

    let pathParams = {
      change_id: change_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/time_entries/{time_entry_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a time entry on a change
   * Delete the time entry on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteChangeTimeEntry(change_id, time_entry_id) {
    return this.deleteChangeTimeEntryWithHttpInfo(change_id, time_entry_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Change
   * Retrieve the Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChange201Response} and HTTP response
   */
  getChangeWithHttpInfo(change_id) {
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling getChange");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateChange201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Change
   * Retrieve the Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChange201Response}
   */
  getChange(change_id) {
    return this.getChangeWithHttpInfo(change_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View note on a change
   * Retrieve a note on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  getChangeNoteWithHttpInfo(change_id, note_id) {
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling getChangeNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling getChangeNote");
    }

    let pathParams = {
      change_id: change_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/notes/{note_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View note on a change
   * Retrieve a note on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  getChangeNote(change_id, note_id) {
    return this.getChangeNoteWithHttpInfo(change_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View task on a change
   * Retrieve a task on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  getChangeTaskWithHttpInfo(change_id, task_id) {
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling getChangeTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling getChangeTask");
    }

    let pathParams = {
      change_id: change_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/tasks/{task_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View task on a change
   * Retrieve a task on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  getChangeTask(change_id, task_id) {
    return this.getChangeTaskWithHttpInfo(change_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View time entry on a change
   * Retrieve a time entry on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  getChangeTimeEntryWithHttpInfo(change_id, time_entry_id) {
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling getChangeTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling getChangeTimeEntry");
    }

    let pathParams = {
      change_id: change_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/time_entries/{time_entry_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View time entry on a change
   * Retrieve a time entry on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  getChangeTimeEntry(change_id, time_entry_id) {
    return this.getChangeTimeEntryWithHttpInfo(change_id, time_entry_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Change Fields
   * Retrieve all the Fields that constitute the Change Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListChangeFormFields200Response} and HTTP response
   */
  listChangeFormFieldsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListChangeFormFields200Response;
    return this.apiClient.callApi(
      "/api/v2/change_form_fields",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Change Fields
   * Retrieve all the Fields that constitute the Change Object
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListChangeFormFields200Response}
   */
  listChangeFormFields() {
    return this.listChangeFormFieldsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View notes on change
   * Retrieve the notes on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request for which notes are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of notes to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListChangeNotes200Response} and HTTP response
   */
  listChangeNotesWithHttpInfo(change_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling listChangeNotes");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListChangeNotes200Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/notes",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View notes on change
   * Retrieve the notes on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request for which notes are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of notes to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListChangeNotes200Response}
   */
  listChangeNotes(change_id, opts) {
    return this.listChangeNotesWithHttpInfo(change_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View tasks on change
   * Retrieve the tasks on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request for which tasks are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of tasks to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketTasks200Response} and HTTP response
   */
  listChangeTasksWithHttpInfo(change_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling listChangeTasks");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketTasks200Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/tasks",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View tasks on change
   * Retrieve the tasks on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request for which tasks are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of tasks to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketTasks200Response}
   */
  listChangeTasks(change_id, opts) {
    return this.listChangeTasksWithHttpInfo(change_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View time entries on change
   * Retrieve the time entries on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request for which time entries are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of time entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketTimeEntries200Response} and HTTP response
   */
  listChangeTimeEntriesWithHttpInfo(change_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling listChangeTimeEntries");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketTimeEntries200Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/time_entries",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View time entries on change
   * Retrieve the time entries on a Change request with the given ID from Freshservice
   * @param {Number} change_id ID of change request for which time entries are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of time entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketTimeEntries200Response}
   */
  listChangeTimeEntries(change_id, opts) {
    return this.listChangeTimeEntriesWithHttpInfo(change_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Changes
   * Retrieve a list of all Changes in Freshservice
   * @param {Object} opts Optional parameters
   * @param {module:model/String} opts.filter_name Retrieve the changes by the filter name
   * @param {String} opts.requester_id Retrieve the changes by the requester id
   * @param {String} opts.email Retrieve the changes by the requester email
   * @param {Date} opts.updated_since Retrieve the changes by when it was last updated
   * @param {Number} opts.per_page The number of changes to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListChanges200Response} and HTTP response
   */
  listChangesWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      filter_name: opts["filter_name"],
      requester_id: opts["requester_id"],
      email: opts["email"],
      updated_since: opts["updated_since"],
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListChanges200Response;
    return this.apiClient.callApi(
      "/api/v2/changes",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Changes
   * Retrieve a list of all Changes in Freshservice
   * @param {Object} opts Optional parameters
   * @param {module:model/String} opts.filter_name Retrieve the changes by the filter name
   * @param {String} opts.requester_id Retrieve the changes by the requester id
   * @param {String} opts.email Retrieve the changes by the requester email
   * @param {Date} opts.updated_since Retrieve the changes by when it was last updated
   * @param {Number} opts.per_page The number of changes to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListChanges200Response}
   */
  listChanges(opts) {
    return this.listChangesWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Change request
   * Update an existing Change request in Freshservice
   * @param {module:model/Change} change change details that needs to be updated
   * @param {Number} change_id ID of change request to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChange201Response} and HTTP response
   */
  updateChangeWithHttpInfo(change, change_id) {
    let postBody = change;
    // verify the required parameter 'change' is set
    if (change === undefined || change === null) {
      throw new Error("Missing the required parameter 'change' when calling updateChange");
    }
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling updateChange");
    }

    let pathParams = {
      change_id: change_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateChange201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Change request
   * Update an existing Change request in Freshservice
   * @param {module:model/Change} change change details that needs to be updated
   * @param {Number} change_id ID of change request to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChange201Response}
   */
  updateChange(change, change_id) {
    return this.updateChangeWithHttpInfo(change, change_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a note on a change
   * Update an existing note on an existing Change request in Freshservice
   * @param {module:model/Note} note note details that needs to be updated
   * @param {Number} change_id ID of change request
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  updateChangeNoteWithHttpInfo(note, change_id, note_id) {
    let postBody = note;
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error("Missing the required parameter 'note' when calling updateChangeNote");
    }
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling updateChangeNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling updateChangeNote");
    }

    let pathParams = {
      change_id: change_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/notes/{note_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a note on a change
   * Update an existing note on an existing Change request in Freshservice
   * @param {module:model/Note} note note details that needs to be updated
   * @param {Number} change_id ID of change request
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  updateChangeNote(note, change_id, note_id) {
    return this.updateChangeNoteWithHttpInfo(note, change_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a task on a change
   * Update an existing task on an existing Change request in Freshservice
   * @param {module:model/Task} task tassk details that needs to be updated
   * @param {Number} change_id ID of change request
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  updateChangeTaskWithHttpInfo(task, change_id, task_id) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling updateChangeTask");
    }
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling updateChangeTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling updateChangeTask");
    }

    let pathParams = {
      change_id: change_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/tasks/{task_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a task on a change
   * Update an existing task on an existing Change request in Freshservice
   * @param {module:model/Task} task tassk details that needs to be updated
   * @param {Number} change_id ID of change request
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  updateChangeTask(task, change_id, task_id) {
    return this.updateChangeTaskWithHttpInfo(task, change_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a time entry on a change
   * Update an existing time entry on an existing Change request in Freshservice
   * @param {module:model/TimeEntry} time_entry time entry details that needs to be updated
   * @param {Number} change_id ID of change request
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  updateChangeTimeEntryWithHttpInfo(time_entry, change_id, time_entry_id) {
    let postBody = time_entry;
    // verify the required parameter 'time_entry' is set
    if (time_entry === undefined || time_entry === null) {
      throw new Error("Missing the required parameter 'time_entry' when calling updateChangeTimeEntry");
    }
    // verify the required parameter 'change_id' is set
    if (change_id === undefined || change_id === null) {
      throw new Error("Missing the required parameter 'change_id' when calling updateChangeTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling updateChangeTimeEntry");
    }

    let pathParams = {
      change_id: change_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/changes/{change_id}/time_entries/{time_entry_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a time entry on a change
   * Update an existing time entry on an existing Change request in Freshservice
   * @param {module:model/TimeEntry} time_entry time entry details that needs to be updated
   * @param {Number} change_id ID of change request
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  updateChangeTimeEntry(time_entry, change_id, time_entry_id) {
    return this.updateChangeTimeEntryWithHttpInfo(time_entry, change_id, time_entry_id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
