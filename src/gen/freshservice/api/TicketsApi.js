/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Conversation from "../model/Conversation";
import CreateTicket201Response from "../model/CreateTicket201Response";
import CreateTicketFieldSource201Response from "../model/CreateTicketFieldSource201Response";
import CreateTicketNote201Response from "../model/CreateTicketNote201Response";
import CreateTicketReply201Response from "../model/CreateTicketReply201Response";
import CreateTicketTask201Response from "../model/CreateTicketTask201Response";
import CreateTicketTimeEntry201Response from "../model/CreateTicketTimeEntry201Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListTicketConversations200Response from "../model/ListTicketConversations200Response";
import ListTicketTasks200Response from "../model/ListTicketTasks200Response";
import ListTicketTimeEntries200Response from "../model/ListTicketTimeEntries200Response";
import ListTickets200Response from "../model/ListTickets200Response";
import Reply from "../model/Reply";
import Task from "../model/Task";
import Ticket from "../model/Ticket";
import TicketNote from "../model/TicketNote";
import TicketSource from "../model/TicketSource";
import TimeEntry from "../model/TimeEntry";
import UpdateTicketConversation200Response from "../model/UpdateTicketConversation200Response";

/**
 * Tickets service.
 * @module api/TicketsApi
 * @version 1.0.0
 */
export default class TicketsApi {
  /**
   * Constructs a new TicketsApi.
   * @alias module:api/TicketsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * ~ Create child ticket for a ticket
   * Create a new child Ticket on a Freshservice Ticket
   * @param {module:model/Ticket} ticket details of child ticket to be created
   * @param {Number} ticket_id ID of ticket request for which child ticket needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicket201Response} and HTTP response
   */
  createChildTicketWithHttpInfo(ticket, ticket_id) {
    let postBody = ticket;
    // verify the required parameter 'ticket' is set
    if (ticket === undefined || ticket === null) {
      throw new Error("Missing the required parameter 'ticket' when calling createChildTicket");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling createChildTicket");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicket201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/create_child_ticket",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Create child ticket for a ticket
   * Create a new child Ticket on a Freshservice Ticket
   * @param {module:model/Ticket} ticket details of child ticket to be created
   * @param {Number} ticket_id ID of ticket request for which child ticket needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicket201Response}
   */
  createChildTicket(ticket, ticket_id) {
    return this.createChildTicketWithHttpInfo(ticket, ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ Create a Ticket
   * Create a new Ticket in Freshservice
   * @param {module:model/Ticket} ticket details of the Freshservice Ticket to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicket201Response} and HTTP response
   */
  createTicketWithHttpInfo(ticket) {
    let postBody = ticket;
    // verify the required parameter 'ticket' is set
    if (ticket === undefined || ticket === null) {
      throw new Error("Missing the required parameter 'ticket' when calling createTicket");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicket201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Create a Ticket
   * Create a new Ticket in Freshservice
   * @param {module:model/Ticket} ticket details of the Freshservice Ticket to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicket201Response}
   */
  createTicket(ticket) {
    return this.createTicketWithHttpInfo(ticket).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create source
   * Create a custom ticket source in Freshservice
   * @param {module:model/TicketSource} source Custom ticket source that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketFieldSource201Response} and HTTP response
   */
  createTicketFieldSourceWithHttpInfo(source) {
    let postBody = source;
    // verify the required parameter 'source' is set
    if (source === undefined || source === null) {
      throw new Error("Missing the required parameter 'source' when calling createTicketFieldSource");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketFieldSource201Response;
    return this.apiClient.callApi(
      "/api/v2/ticket_fields/sources",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create source
   * Create a custom ticket source in Freshservice
   * @param {module:model/TicketSource} source Custom ticket source that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketFieldSource201Response}
   */
  createTicketFieldSource(source) {
    return this.createTicketFieldSourceWithHttpInfo(source).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ Create a Note on a ticket
   * Post a new Note on a Freshservice Ticket
   * @param {module:model/TicketNote} note details of the note to be posted
   * @param {Number} ticket_id ID of the ticket for which note has to be added
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketNote201Response} and HTTP response
   */
  createTicketNoteWithHttpInfo(note, ticket_id) {
    let postBody = note;
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error("Missing the required parameter 'note' when calling createTicketNote");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling createTicketNote");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketNote201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/notes",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Create a Note on a ticket
   * Post a new Note on a Freshservice Ticket
   * @param {module:model/TicketNote} note details of the note to be posted
   * @param {Number} ticket_id ID of the ticket for which note has to be added
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketNote201Response}
   */
  createTicketNote(note, ticket_id) {
    return this.createTicketNoteWithHttpInfo(note, ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ Create a Reply on a ticket
   * Post a new Reply on a Freshservice Ticket
   * @param {module:model/Reply} reply details of the Reply to be posted
   * @param {Number} ticket_id ID of ticket for which reply has to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketReply201Response} and HTTP response
   */
  createTicketReplyWithHttpInfo(reply, ticket_id) {
    let postBody = reply;
    // verify the required parameter 'reply' is set
    if (reply === undefined || reply === null) {
      throw new Error("Missing the required parameter 'reply' when calling createTicketReply");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling createTicketReply");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketReply201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/reply",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Create a Reply on a ticket
   * Post a new Reply on a Freshservice Ticket
   * @param {module:model/Reply} reply details of the Reply to be posted
   * @param {Number} ticket_id ID of ticket for which reply has to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketReply201Response}
   */
  createTicketReply(reply, ticket_id) {
    return this.createTicketReplyWithHttpInfo(reply, ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Task on a ticket
   * Create a new task on a ticket request in freshservice
   * @param {module:model/Task} task details of task to be created
   * @param {Number} ticket_id ID of ticket request for which tasks are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  createTicketTaskWithHttpInfo(task, ticket_id) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling createTicketTask");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling createTicketTask");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/tasks",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Task on a ticket
   * Create a new task on a ticket request in freshservice
   * @param {module:model/Task} task details of task to be created
   * @param {Number} ticket_id ID of ticket request for which tasks are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  createTicketTask(task, ticket_id) {
    return this.createTicketTaskWithHttpInfo(task, ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create time entry on a ticket
   * Create a new time entry on a ticket request in freshservice
   * @param {module:model/TimeEntry} time_entry details of time entry to be created
   * @param {Number} ticket_id ID of ticket request for which time entries are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  createTicketTimeEntryWithHttpInfo(time_entry, ticket_id) {
    let postBody = time_entry;
    // verify the required parameter 'time_entry' is set
    if (time_entry === undefined || time_entry === null) {
      throw new Error("Missing the required parameter 'time_entry' when calling createTicketTimeEntry");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling createTicketTimeEntry");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/time_entries",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create time entry on a ticket
   * Create a new time entry on a ticket request in freshservice
   * @param {module:model/TimeEntry} time_entry details of time entry to be created
   * @param {Number} ticket_id ID of ticket request for which time entries are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  createTicketTimeEntry(time_entry, ticket_id) {
    return this.createTicketTimeEntryWithHttpInfo(time_entry, ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ Delete a ticket
   * Remove a Freshservice Ticket
   * @param {Number} ticket_id ID of the ticket to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteTicketWithHttpInfo(ticket_id) {
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling deleteTicket");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Delete a ticket
   * Remove a Freshservice Ticket
   * @param {Number} ticket_id ID of the ticket to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteTicket(ticket_id) {
    return this.deleteTicketWithHttpInfo(ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ Delete a conversation on a ticket
   * Remove a conversation on a Freshservice Ticket
   * @param {Number} ticket_id ID of the ticket for which conversation has to be added
   * @param {Number} conversation_id ID of the reply or note that needs to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteTicketConversationWithHttpInfo(ticket_id, conversation_id) {
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling deleteTicketConversation");
    }
    // verify the required parameter 'conversation_id' is set
    if (conversation_id === undefined || conversation_id === null) {
      throw new Error("Missing the required parameter 'conversation_id' when calling deleteTicketConversation");
    }

    let pathParams = {
      ticket_id: ticket_id,
      conversation_id: conversation_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/conversations/{conversation_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Delete a conversation on a ticket
   * Remove a conversation on a Freshservice Ticket
   * @param {Number} ticket_id ID of the ticket for which conversation has to be added
   * @param {Number} conversation_id ID of the reply or note that needs to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteTicketConversation(ticket_id, conversation_id) {
    return this.deleteTicketConversationWithHttpInfo(ticket_id, conversation_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete task on a ticket
   * Delete the task on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket
   * @param {Number} task_id ID of task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteTicketTaskWithHttpInfo(ticket_id, task_id) {
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling deleteTicketTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling deleteTicketTask");
    }

    let pathParams = {
      ticket_id: ticket_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/tasks/{task_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete task on a ticket
   * Delete the task on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket
   * @param {Number} task_id ID of task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteTicketTask(ticket_id, task_id) {
    return this.deleteTicketTaskWithHttpInfo(ticket_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a time entry on a ticket
   * Delete the time entry on a Freshservice Ticket
   * @param {Number} ticket_id ID of ticket
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteTicketTimeEntryWithHttpInfo(ticket_id, time_entry_id) {
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling deleteTicketTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling deleteTicketTimeEntry");
    }

    let pathParams = {
      ticket_id: ticket_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/time_entries/{time_entry_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a time entry on a ticket
   * Delete the time entry on a Freshservice Ticket
   * @param {Number} ticket_id ID of ticket
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteTicketTimeEntry(ticket_id, time_entry_id) {
    return this.deleteTicketTimeEntryWithHttpInfo(ticket_id, time_entry_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ View a Ticket
   * Get the details of a FreshService Ticket
   * @param {Number} ticket_id ID of the ticket to be fetched
   * @param {Object} opts Optional parameters
   * @param {String} opts.include Query param to include certain fields in response. E.g. '?include=stats' Will return the ticket’s closed_at, resolved_at and first_responded_at time. '?include=requester' Will return the requester's email, id, mobile, name, and phone. Supported options - [conversations, requester, problem, stats, assets, change, related_tickets]
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTickets200Response} and HTTP response
   */
  getTicketWithHttpInfo(ticket_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling getTicket");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {
      include: opts["include"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTickets200Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ View a Ticket
   * Get the details of a FreshService Ticket
   * @param {Number} ticket_id ID of the ticket to be fetched
   * @param {Object} opts Optional parameters
   * @param {String} opts.include Query param to include certain fields in response. E.g. '?include=stats' Will return the ticket’s closed_at, resolved_at and first_responded_at time. '?include=requester' Will return the requester's email, id, mobile, name, and phone. Supported options - [conversations, requester, problem, stats, assets, change, related_tickets]
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTickets200Response}
   */
  getTicket(ticket_id, opts) {
    return this.getTicketWithHttpInfo(ticket_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View task on a ticket
   * Retrieve a task on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket request
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  getTicketTaskWithHttpInfo(ticket_id, task_id) {
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling getTicketTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling getTicketTask");
    }

    let pathParams = {
      ticket_id: ticket_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/tasks/{task_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View task on a ticket
   * Retrieve a task on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket request
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  getTicketTask(ticket_id, task_id) {
    return this.getTicketTaskWithHttpInfo(ticket_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View time entry on a ticket
   * Retrieve a time entry on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket request
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  getTicketTimeEntryWithHttpInfo(ticket_id, time_entry_id) {
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling getTicketTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling getTicketTimeEntry");
    }

    let pathParams = {
      ticket_id: ticket_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/time_entries/{time_entry_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View time entry on a ticket
   * Retrieve a time entry on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket request
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  getTicketTimeEntry(ticket_id, time_entry_id) {
    return this.getTicketTimeEntryWithHttpInfo(ticket_id, time_entry_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ List all conversations on a Ticket
   * Fetch the list of all conversations on a Freshservice Ticket
   * @param {Number} ticket_id ID of the ticket for which conversations has to be fetched
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketConversations200Response} and HTTP response
   */
  listTicketConversationsWithHttpInfo(ticket_id) {
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling listTicketConversations");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketConversations200Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/conversations",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ List all conversations on a Ticket
   * Fetch the list of all conversations on a Freshservice Ticket
   * @param {Number} ticket_id ID of the ticket for which conversations has to be fetched
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketConversations200Response}
   */
  listTicketConversations(ticket_id) {
    return this.listTicketConversationsWithHttpInfo(ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View all tasks on ticket
   * Retrieve the tasks on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket request for which tasks are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of tasks to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketTasks200Response} and HTTP response
   */
  listTicketTasksWithHttpInfo(ticket_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling listTicketTasks");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketTasks200Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/tasks",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View all tasks on ticket
   * Retrieve the tasks on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket request for which tasks are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of tasks to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketTasks200Response}
   */
  listTicketTasks(ticket_id, opts) {
    return this.listTicketTasksWithHttpInfo(ticket_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View all time entries on ticket
   * Retrieve the time entries on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket request for which time entries are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of time entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketTimeEntries200Response} and HTTP response
   */
  listTicketTimeEntriesWithHttpInfo(ticket_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling listTicketTimeEntries");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketTimeEntries200Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/time_entries",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View all time entries on ticket
   * Retrieve the time entries on a ticket request with the given ID from Freshservice
   * @param {Number} ticket_id ID of ticket request for which time entries are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of time entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketTimeEntries200Response}
   */
  listTicketTimeEntries(ticket_id, opts) {
    return this.listTicketTimeEntriesWithHttpInfo(ticket_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ List all Tickets
   * Fetch the list of all Tickets in FreshService
   * @param {Object} opts Optional parameters
   * @param {String} opts.filter Pre-defined filters. The filters available are [new_and_my_open, watching, spam, deleted].
   * @param {String} opts.email Query param to filter out tickets requester's email id.
   * @param {Number} opts.requester_id Query param to filter out tickets created by a particular requester.
   * @param {String} opts.updated_since Query param to filter out tickets based on updated time. E.g. '?updated_since=2015-01-19T02:00:00Z'.
   * @param {String} opts.include Query param to include certain fields in response. E.g. '?include=stats' Will return the ticket’s closed_at, resolved_at and first_responded_at time. '?include=requester' Will return the requester's email, id, mobile, name, and phone.
   * @param {String} opts.order_type Query param to sort the list of tickets. Supported values - 'asc' and 'desc'. Default is 'desc'
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTickets200Response} and HTTP response
   */
  listTicketsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      filter: opts["filter"],
      email: opts["email"],
      requester_id: opts["requester_id"],
      updated_since: opts["updated_since"],
      include: opts["include"],
      order_type: opts["order_type"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTickets200Response;
    return this.apiClient.callApi(
      "/api/v2/tickets",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ List all Tickets
   * Fetch the list of all Tickets in FreshService
   * @param {Object} opts Optional parameters
   * @param {String} opts.filter Pre-defined filters. The filters available are [new_and_my_open, watching, spam, deleted].
   * @param {String} opts.email Query param to filter out tickets requester's email id.
   * @param {Number} opts.requester_id Query param to filter out tickets created by a particular requester.
   * @param {String} opts.updated_since Query param to filter out tickets based on updated time. E.g. '?updated_since=2015-01-19T02:00:00Z'.
   * @param {String} opts.include Query param to include certain fields in response. E.g. '?include=stats' Will return the ticket’s closed_at, resolved_at and first_responded_at time. '?include=requester' Will return the requester's email, id, mobile, name, and phone.
   * @param {String} opts.order_type Query param to sort the list of tickets. Supported values - 'asc' and 'desc'. Default is 'desc'
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTickets200Response}
   */
  listTickets(opts) {
    return this.listTicketsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ Restore a ticket
   * Restore a deleted Freshservice Ticket
   * @param {Number} ticket_id ID of the ticket to be restored
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  restoreTicketWithHttpInfo(ticket_id) {
    let postBody = null;
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling restoreTicket");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/restore",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Restore a ticket
   * Restore a deleted Freshservice Ticket
   * @param {Number} ticket_id ID of the ticket to be restored
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  restoreTicket(ticket_id) {
    return this.restoreTicketWithHttpInfo(ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ Update a  ticket
   * Edit a Freshservice Ticket
   * @param {module:model/Ticket} ticket Details of the ticket to be updated
   * @param {Number} ticket_id ID of the ticket to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicket201Response} and HTTP response
   */
  updateTicketWithHttpInfo(ticket, ticket_id) {
    let postBody = ticket;
    // verify the required parameter 'ticket' is set
    if (ticket === undefined || ticket === null) {
      throw new Error("Missing the required parameter 'ticket' when calling updateTicket");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling updateTicket");
    }

    let pathParams = {
      ticket_id: ticket_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicket201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Update a  ticket
   * Edit a Freshservice Ticket
   * @param {module:model/Ticket} ticket Details of the ticket to be updated
   * @param {Number} ticket_id ID of the ticket to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicket201Response}
   */
  updateTicket(ticket, ticket_id) {
    return this.updateTicketWithHttpInfo(ticket, ticket_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ~ Update a conversation on a ticket
   * Edit the conversation on a Freshservice Ticket
   * @param {module:model/Conversation} conversation details of the conversation to be updated
   * @param {Number} ticket_id ID of the ticket for which conversation has to be deleted
   * @param {Number} conversation_id ID of the reply or note that needs to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTicketConversation200Response} and HTTP response
   */
  updateTicketConversationWithHttpInfo(conversation, ticket_id, conversation_id) {
    let postBody = conversation;
    // verify the required parameter 'conversation' is set
    if (conversation === undefined || conversation === null) {
      throw new Error("Missing the required parameter 'conversation' when calling updateTicketConversation");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling updateTicketConversation");
    }
    // verify the required parameter 'conversation_id' is set
    if (conversation_id === undefined || conversation_id === null) {
      throw new Error("Missing the required parameter 'conversation_id' when calling updateTicketConversation");
    }

    let pathParams = {
      ticket_id: ticket_id,
      conversation_id: conversation_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = UpdateTicketConversation200Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/conversations/{conversation_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ~ Update a conversation on a ticket
   * Edit the conversation on a Freshservice Ticket
   * @param {module:model/Conversation} conversation details of the conversation to be updated
   * @param {Number} ticket_id ID of the ticket for which conversation has to be deleted
   * @param {Number} conversation_id ID of the reply or note that needs to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTicketConversation200Response}
   */
  updateTicketConversation(conversation, ticket_id, conversation_id) {
    return this.updateTicketConversationWithHttpInfo(conversation, ticket_id, conversation_id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Update a task on a ticket
   * Update an existing task on an existing ticket request in Freshservice
   * @param {module:model/Task} task tassk details that needs to be updated
   * @param {Number} ticket_id ID of ticket request
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  updateTicketTaskWithHttpInfo(task, ticket_id, task_id) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling updateTicketTask");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling updateTicketTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling updateTicketTask");
    }

    let pathParams = {
      ticket_id: ticket_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/tasks/{task_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a task on a ticket
   * Update an existing task on an existing ticket request in Freshservice
   * @param {module:model/Task} task tassk details that needs to be updated
   * @param {Number} ticket_id ID of ticket request
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  updateTicketTask(task, ticket_id, task_id) {
    return this.updateTicketTaskWithHttpInfo(task, ticket_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a time entry on a ticket
   * Update an existing time entry on an existing ticket request in Freshservice
   * @param {module:model/TimeEntry} time_entry time entry details that needs to be updated
   * @param {Number} ticket_id ID of ticket request
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  updateTicketTimeEntryWithHttpInfo(time_entry, ticket_id, time_entry_id) {
    let postBody = time_entry;
    // verify the required parameter 'time_entry' is set
    if (time_entry === undefined || time_entry === null) {
      throw new Error("Missing the required parameter 'time_entry' when calling updateTicketTimeEntry");
    }
    // verify the required parameter 'ticket_id' is set
    if (ticket_id === undefined || ticket_id === null) {
      throw new Error("Missing the required parameter 'ticket_id' when calling updateTicketTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling updateTicketTimeEntry");
    }

    let pathParams = {
      ticket_id: ticket_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/tickets/{ticket_id}/time_entries/{time_entry_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a time entry on a ticket
   * Update an existing time entry on an existing ticket request in Freshservice
   * @param {module:model/TimeEntry} time_entry time entry details that needs to be updated
   * @param {Number} ticket_id ID of ticket request
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  updateTicketTimeEntry(time_entry, ticket_id, time_entry_id) {
    return this.updateTicketTimeEntryWithHttpInfo(time_entry, ticket_id, time_entry_id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
  
}
