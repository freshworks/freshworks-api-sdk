/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateOnboardingRequest201Response from "../model/CreateOnboardingRequest201Response";
import GetOnboardingRequestFormRequest from "../model/GetOnboardingRequestFormRequest";
import ListDepartments401Response from "../model/ListDepartments401Response";
import OnboardingForm from "../model/OnboardingForm";
import OnboardingRequestFields from "../model/OnboardingRequestFields";
import OnboardingRequestIndex from "../model/OnboardingRequestIndex";
import OnboardingTicket from "../model/OnboardingTicket";

/**
 * EmployeeOnboarding service.
 * @module api/EmployeeOnboardingApi
 * @version 1.0.0
 */
export default class EmployeeOnboardingApi {
  /**
   * Constructs a new EmployeeOnboardingApi.
   * @alias module:api/EmployeeOnboardingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Onboarding Request
   * Create a new Onboarding Request in Freshservice
   * @param {Object} opts Optional parameters
   * @param {module:model/OnboardingRequestFields} opts.onboarding_request onboarding request that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateOnboardingRequest201Response} and HTTP response
   */
  createOnboardingRequestWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts["onboarding_request"];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateOnboardingRequest201Response;
    return this.apiClient.callApi(
      "/api/v2/onboarding_requests",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Onboarding Request
   * Create a new Onboarding Request in Freshservice
   * @param {Object} opts Optional parameters
   * @param {module:model/OnboardingRequestFields} opts.onboarding_request onboarding request that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateOnboardingRequest201Response}
   */
  createOnboardingRequest(opts) {
    return this.createOnboardingRequestWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get a specific Onboarding Request
   * Get a specific Onboarding Request from freshservice
   * @param {Number} request_id Display ID of the Onboarding Request
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateOnboardingRequest201Response} and HTTP response
   */
  getOnboardingRequestWithHttpInfo(request_id) {
    let postBody = null;
    // verify the required parameter 'request_id' is set
    if (request_id === undefined || request_id === null) {
      throw new Error("Missing the required parameter 'request_id' when calling getOnboardingRequest");
    }

    let pathParams = {
      request_id: request_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateOnboardingRequest201Response;
    return this.apiClient.callApi(
      "/api/v2/onboarding_requests/{request_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get a specific Onboarding Request
   * Get a specific Onboarding Request from freshservice
   * @param {Number} request_id Display ID of the Onboarding Request
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateOnboardingRequest201Response}
   */
  getOnboardingRequest(request_id) {
    return this.getOnboardingRequestWithHttpInfo(request_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Display onboarding form details
   * Retrieve a list of all fields in initiator form.
   * @param {Object} opts Optional parameters
   * @param {module:model/GetOnboardingRequestFormRequest} opts.body
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OnboardingForm} and HTTP response
   */
  getOnboardingRequestFormWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts["body"];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = OnboardingForm;
    return this.apiClient.callApi(
      "/api/v2/onboarding_requests/form",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Display onboarding form details
   * Retrieve a list of all fields in initiator form.
   * @param {Object} opts Optional parameters
   * @param {module:model/GetOnboardingRequestFormRequest} opts.body
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OnboardingForm}
   */
  getOnboardingRequestForm(opts) {
    return this.getOnboardingRequestFormWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get the details of the FreshService Tickets associated with a specific Onboarding Request
   * Get the details of the FreshService Tickets associated with a specific Onboarding Request
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OnboardingTicket} and HTTP response
   */
  listOnboardingRequestTicketsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = OnboardingTicket;
    return this.apiClient.callApi(
      "/api/v2/onboarding_requests/id/tickets",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get the details of the FreshService Tickets associated with a specific Onboarding Request
   * Get the details of the FreshService Tickets associated with a specific Onboarding Request
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OnboardingTicket}
   */
  listOnboardingRequestTickets() {
    return this.listOnboardingRequestTicketsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get all Onboarding Requests
   * Get all Onboarding Request for a particular user.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OnboardingRequestIndex} and HTTP response
   */
  listOnboardingRequestsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = OnboardingRequestIndex;
    return this.apiClient.callApi(
      "/api/v2/onboarding_requests",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get all Onboarding Requests
   * Get all Onboarding Request for a particular user.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OnboardingRequestIndex}
   */
  listOnboardingRequests() {
    return this.listOnboardingRequestsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
