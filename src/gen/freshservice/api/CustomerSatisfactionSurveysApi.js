/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateSurvey201Response from "../model/CreateSurvey201Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListSurveys200Response from "../model/ListSurveys200Response";
import Survey from "../model/Survey";

/**
 * CustomerSatisfactionSurveys service.
 * @module api/CustomerSatisfactionSurveysApi
 * @version 2.0.1
 */
export default class CustomerSatisfactionSurveysApi {
  /**
   * Constructs a new CustomerSatisfactionSurveysApi.
   * @alias module:api/CustomerSatisfactionSurveysApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Activate Survey
   * Activate the CSAT Survey with the given ID from Freshservice
   * @param {Number} survey_id ID of CSAT survey to activate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  activateSurveyWithHttpInfo(survey_id) {
    let postBody = null;
    // verify the required parameter 'survey_id' is set
    if (survey_id === undefined || survey_id === null) {
      throw new Error("Missing the required parameter 'survey_id' when calling activateSurvey");
    }

    let pathParams = {
      survey_id: survey_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/surveys/{survey_id}/activate",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Activate Survey
   * Activate the CSAT Survey with the given ID from Freshservice
   * @param {Number} survey_id ID of CSAT survey to activate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  activateSurvey(survey_id) {
    return this.activateSurveyWithHttpInfo(survey_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Survey
   * Create a new CSAT survey in Freshservice
   * @param {module:model/Survey} survey CSAT Survey that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSurvey201Response} and HTTP response
   */
  createSurveyWithHttpInfo(survey) {
    let postBody = survey;
    // verify the required parameter 'survey' is set
    if (survey === undefined || survey === null) {
      throw new Error("Missing the required parameter 'survey' when calling createSurvey");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateSurvey201Response;
    return this.apiClient.callApi(
      "/api/v2/surveys",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Survey
   * Create a new CSAT survey in Freshservice
   * @param {module:model/Survey} survey CSAT Survey that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSurvey201Response}
   */
  createSurvey(survey) {
    return this.createSurveyWithHttpInfo(survey).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Deactivate Survey
   * Deactivate the CSAT Survey with the given ID from Freshservice
   * @param {Number} survey_id ID of CSAT survey to deactivate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deactivateSurveyWithHttpInfo(survey_id) {
    let postBody = null;
    // verify the required parameter 'survey_id' is set
    if (survey_id === undefined || survey_id === null) {
      throw new Error("Missing the required parameter 'survey_id' when calling deactivateSurvey");
    }

    let pathParams = {
      survey_id: survey_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/surveys/{survey_id}/deactivate",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Deactivate Survey
   * Deactivate the CSAT Survey with the given ID from Freshservice
   * @param {Number} survey_id ID of CSAT survey to deactivate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deactivateSurvey(survey_id) {
    return this.deactivateSurveyWithHttpInfo(survey_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Survey
   * Delete the Survey with the given ID along with the underlying responses to this Survey from Freshservice
   * @param {Number} survey_id ID of survey to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteSurveyWithHttpInfo(survey_id) {
    let postBody = null;
    // verify the required parameter 'survey_id' is set
    if (survey_id === undefined || survey_id === null) {
      throw new Error("Missing the required parameter 'survey_id' when calling deleteSurvey");
    }

    let pathParams = {
      survey_id: survey_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/surveys/{survey_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Survey
   * Delete the Survey with the given ID along with the underlying responses to this Survey from Freshservice
   * @param {Number} survey_id ID of survey to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteSurvey(survey_id) {
    return this.deleteSurveyWithHttpInfo(survey_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Survey
   * Retrieve the CSAT Survey with the given ID from Freshservice
   * @param {Number} survey_id ID of CSAT survey to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSurveys200Response} and HTTP response
   */
  getSurveyWithHttpInfo(survey_id) {
    let postBody = null;
    // verify the required parameter 'survey_id' is set
    if (survey_id === undefined || survey_id === null) {
      throw new Error("Missing the required parameter 'survey_id' when calling getSurvey");
    }

    let pathParams = {
      survey_id: survey_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListSurveys200Response;
    return this.apiClient.callApi(
      "/api/v2/surveys/{survey_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Survey
   * Retrieve the CSAT Survey with the given ID from Freshservice
   * @param {Number} survey_id ID of CSAT survey to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSurveys200Response}
   */
  getSurvey(survey_id) {
    return this.getSurveyWithHttpInfo(survey_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Surveys
   * Retrieve a list of all CSAT Surveys in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.active Query param to filter out active / inactive surveys. E.g. Passing the parameter active=1 will list the active survey.
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSurveys200Response} and HTTP response
   */
  listSurveysWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      active: opts["active"],
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListSurveys200Response;
    return this.apiClient.callApi(
      "/api/v2/surveys",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Surveys
   * Retrieve a list of all CSAT Surveys in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.active Query param to filter out active / inactive surveys. E.g. Passing the parameter active=1 will list the active survey.
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSurveys200Response}
   */
  listSurveys(opts) {
    return this.listSurveysWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Survey
   * Update an existing CSAT Survey in Freshservice
   * @param {module:model/Survey} survey Survey that needs to be updated
   * @param {Number} survey_id ID of Survey to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSurvey201Response} and HTTP response
   */
  updateSurveyWithHttpInfo(survey, survey_id) {
    let postBody = survey;
    // verify the required parameter 'survey' is set
    if (survey === undefined || survey === null) {
      throw new Error("Missing the required parameter 'survey' when calling updateSurvey");
    }
    // verify the required parameter 'survey_id' is set
    if (survey_id === undefined || survey_id === null) {
      throw new Error("Missing the required parameter 'survey_id' when calling updateSurvey");
    }

    let pathParams = {
      survey_id: survey_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateSurvey201Response;
    return this.apiClient.callApi(
      "/api/v2/surveys/{survey_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Survey
   * Update an existing CSAT Survey in Freshservice
   * @param {module:model/Survey} survey Survey that needs to be updated
   * @param {Number} survey_id ID of Survey to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSurvey201Response}
   */
  updateSurvey(survey, survey_id) {
    return this.updateSurveyWithHttpInfo(survey, survey_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
