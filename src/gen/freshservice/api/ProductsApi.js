/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListProducts200Response from "../model/ListProducts200Response";
import Product from "../model/Product";

/**
 * Products service.
 * @module api/ProductsApi
 * @version 1.0.0
 */
export default class ProductsApi {
  /**
   * Constructs a new ProductsApi.
   * @alias module:api/ProductsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create a new Product in the Product Catalog
   * Create a new Product in the Product Catalog
   * @param {module:model/Product} product
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProducts200Response} and HTTP response
   */
  createProductWithHttpInfo(product) {
    let postBody = product;
    // verify the required parameter 'product' is set
    if (product === undefined || product === null) {
      throw new Error("Missing the required parameter 'product' when calling createProduct");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = ListProducts200Response;
    return this.apiClient.callApi(
      "/api/v2/products",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a new Product in the Product Catalog
   * Create a new Product in the Product Catalog
   * @param {module:model/Product} product
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProducts200Response}
   */
  createProduct(product) {
    return this.createProductWithHttpInfo(product).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete an existing Product from the Product Catalog
   * Delete an existing Product from the Product Catalog
   * @param {Number} product_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProductWithHttpInfo(product_id) {
    let postBody = null;
    // verify the required parameter 'product_id' is set
    if (product_id === undefined || product_id === null) {
      throw new Error("Missing the required parameter 'product_id' when calling deleteProduct");
    }

    let pathParams = {
      product_id: product_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/products/{product_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete an existing Product from the Product Catalog
   * Delete an existing Product from the Product Catalog
   * @param {Number} product_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProduct(product_id) {
    return this.deleteProductWithHttpInfo(product_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Retrieve a specific Product from the Product Catalog
   * Retrieve a specific Product from the Product Catalog
   * @param {Number} product_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProducts200Response} and HTTP response
   */
  getProductWithHttpInfo(product_id) {
    let postBody = null;
    // verify the required parameter 'product_id' is set
    if (product_id === undefined || product_id === null) {
      throw new Error("Missing the required parameter 'product_id' when calling getProduct");
    }

    let pathParams = {
      product_id: product_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListProducts200Response;
    return this.apiClient.callApi(
      "/api/v2/products/{product_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Retrieve a specific Product from the Product Catalog
   * Retrieve a specific Product from the Product Catalog
   * @param {Number} product_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProducts200Response}
   */
  getProduct(product_id) {
    return this.getProductWithHttpInfo(product_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Products in the Product Catalog
   * Get a list of all Products in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProducts200Response} and HTTP response
   */
  listProductsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListProducts200Response;
    return this.apiClient.callApi(
      "/api/v2/products",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Products in the Product Catalog
   * Get a list of all Products in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProducts200Response}
   */
  listProducts(opts) {
    return this.listProductsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update an existing Product in the Product Catalog
   * Update an existing Product in the Product Catalog
   * @param {module:model/Product} product
   * @param {Number} product_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProducts200Response} and HTTP response
   */
  updateProductWithHttpInfo(product, product_id) {
    let postBody = product;
    // verify the required parameter 'product' is set
    if (product === undefined || product === null) {
      throw new Error("Missing the required parameter 'product' when calling updateProduct");
    }
    // verify the required parameter 'product_id' is set
    if (product_id === undefined || product_id === null) {
      throw new Error("Missing the required parameter 'product_id' when calling updateProduct");
    }

    let pathParams = {
      product_id: product_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = ListProducts200Response;
    return this.apiClient.callApi(
      "/api/v2/products/{product_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update an existing Product in the Product Catalog
   * Update an existing Product in the Product Catalog
   * @param {module:model/Product} product
   * @param {Number} product_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProducts200Response}
   */
  updateProduct(product, product_id) {
    return this.updateProductWithHttpInfo(product, product_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
