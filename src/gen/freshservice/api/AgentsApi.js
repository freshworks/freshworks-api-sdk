/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Agent from "../model/Agent";
import ConvertRequesterToAgent200Response from "../model/ConvertRequesterToAgent200Response";
import ListAgentFields200Response from "../model/ListAgentFields200Response";
import ListAgents200Response from "../model/ListAgents200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";

/**
 * Agents service.
 * @module api/AgentsApi
 * @version 1.0.0
 */
export default class AgentsApi {
  /**
   * Constructs a new AgentsApi.
   * @alias module:api/AgentsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Agent
   * Create a new Agent in Freshservice
   * @param {module:model/Agent} agent Agent who needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConvertRequesterToAgent200Response} and HTTP response
   */
  createAgentWithHttpInfo(agent) {
    let postBody = agent;
    // verify the required parameter 'agent' is set
    if (agent === undefined || agent === null) {
      throw new Error("Missing the required parameter 'agent' when calling createAgent");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = ConvertRequesterToAgent200Response;
    return this.apiClient.callApi(
      "/api/v2/agents",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Agent
   * Create a new Agent in Freshservice
   * @param {module:model/Agent} agent Agent who needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConvertRequesterToAgent200Response}
   */
  createAgent(agent) {
    return this.createAgentWithHttpInfo(agent).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Agent
   * Converts the Agent with the given ID to a requester.
   * @param {Number} agent_id ID of agent to delete
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteAgentWithHttpInfo(agent_id) {
    let postBody = null;
    // verify the required parameter 'agent_id' is set
    if (agent_id === undefined || agent_id === null) {
      throw new Error("Missing the required parameter 'agent_id' when calling deleteAgent");
    }

    let pathParams = {
      agent_id: agent_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/agents/{agent_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Agent
   * Converts the Agent with the given ID to a requester.
   * @param {Number} agent_id ID of agent to delete
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteAgent(agent_id) {
    return this.deleteAgentWithHttpInfo(agent_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Forget Agent
   * Permanently deletes the agent and the tickets that they requested.
   * @param {Number} agent_id ID of agent to forget
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConvertRequesterToAgent200Response} and HTTP response
   */
  forgetAgentWithHttpInfo(agent_id) {
    let postBody = null;
    // verify the required parameter 'agent_id' is set
    if (agent_id === undefined || agent_id === null) {
      throw new Error("Missing the required parameter 'agent_id' when calling forgetAgent");
    }

    let pathParams = {
      agent_id: agent_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ConvertRequesterToAgent200Response;
    return this.apiClient.callApi(
      "/api/v2/agents/{agent_id}/forget",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Forget Agent
   * Permanently deletes the agent and the tickets that they requested.
   * @param {Number} agent_id ID of agent to forget
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConvertRequesterToAgent200Response}
   */
  forgetAgent(agent_id) {
    return this.forgetAgentWithHttpInfo(agent_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Agent
   * Retrieve the Agent with the given ID from Freshservice
   * @param {Number} agent_id ID of agent to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConvertRequesterToAgent200Response} and HTTP response
   */
  getAgentWithHttpInfo(agent_id) {
    let postBody = null;
    // verify the required parameter 'agent_id' is set
    if (agent_id === undefined || agent_id === null) {
      throw new Error("Missing the required parameter 'agent_id' when calling getAgent");
    }

    let pathParams = {
      agent_id: agent_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ConvertRequesterToAgent200Response;
    return this.apiClient.callApi(
      "/api/v2/agents/{agent_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Agent
   * Retrieve the Agent with the given ID from Freshservice
   * @param {Number} agent_id ID of agent to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConvertRequesterToAgent200Response}
   */
  getAgent(agent_id) {
    return this.getAgentWithHttpInfo(agent_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Agent Fields
   * Retrieve a list of all Agent Fields in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAgentFields200Response} and HTTP response
   */
  listAgentFieldsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListAgentFields200Response;
    return this.apiClient.callApi(
      "/api/v2/agent_fields",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Agent Fields
   * Retrieve a list of all Agent Fields in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAgentFields200Response}
   */
  listAgentFields(opts) {
    return this.listAgentFieldsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Agents
   * Retrieve a list of all Agents in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @param {String} opts.email The email address for which the corresponding requester needs to be listed.
   * @param {String} opts.mobile_phone_number The mobile phone number for which the corresponding requesters need to be listed.
   * @param {String} opts.work_phone_number The work phone number for which the corresponding requesters need to be listed.
   * @param {String} opts.state Signifies whether the agents to be listed are full-time agents or occasional agents. Supports two possible values - fulltime, occasional.
   * @param {Boolean} opts.active Signifies if the user accounts to be listed are active (true), or have been deactivated. Not applying this filter returns both active and deactivated accounts.
   * @param {String} opts.query The simple or compound query which needs to be applied as a filter to the list of agents. This string needs to be URL encoded.<br/> Supported Query Parameters:<br/>first_name, last_name, job_title, email, work_phone_number, mobile_phone_number, department_id, reporting_manager_id, time_zone, language, location_id, created_at, updated_at, (all custom fields).<br/>Sample Query: https://account.freshservice.com/api/v2/agents?query=\"job_titile:'HR Manager' AND created_at:>'2018-08-10'\"
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAgents200Response} and HTTP response
   */
  listAgentsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"],
      email: opts["email"],
      mobile_phone_number: opts["mobile_phone_number"],
      work_phone_number: opts["work_phone_number"],
      state: opts["state"],
      active: opts["active"],
      query: opts["query"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListAgents200Response;
    return this.apiClient.callApi(
      "/api/v2/agents",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Agents
   * Retrieve a list of all Agents in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @param {String} opts.email The email address for which the corresponding requester needs to be listed.
   * @param {String} opts.mobile_phone_number The mobile phone number for which the corresponding requesters need to be listed.
   * @param {String} opts.work_phone_number The work phone number for which the corresponding requesters need to be listed.
   * @param {String} opts.state Signifies whether the agents to be listed are full-time agents or occasional agents. Supports two possible values - fulltime, occasional.
   * @param {Boolean} opts.active Signifies if the user accounts to be listed are active (true), or have been deactivated. Not applying this filter returns both active and deactivated accounts.
   * @param {String} opts.query The simple or compound query which needs to be applied as a filter to the list of agents. This string needs to be URL encoded.<br/> Supported Query Parameters:<br/>first_name, last_name, job_title, email, work_phone_number, mobile_phone_number, department_id, reporting_manager_id, time_zone, language, location_id, created_at, updated_at, (all custom fields).<br/>Sample Query: https://account.freshservice.com/api/v2/agents?query=\"job_titile:'HR Manager' AND created_at:>'2018-08-10'\"
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAgents200Response}
   */
  listAgents(opts) {
    return this.listAgentsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Agent
   * Update an existing Agent in Freshservice
   * @param {module:model/Agent} agent Agent who needs to be updated
   * @param {Number} agent_id ID of agent to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConvertRequesterToAgent200Response} and HTTP response
   */
  updateAgentWithHttpInfo(agent, agent_id) {
    let postBody = agent;
    // verify the required parameter 'agent' is set
    if (agent === undefined || agent === null) {
      throw new Error("Missing the required parameter 'agent' when calling updateAgent");
    }
    // verify the required parameter 'agent_id' is set
    if (agent_id === undefined || agent_id === null) {
      throw new Error("Missing the required parameter 'agent_id' when calling updateAgent");
    }

    let pathParams = {
      agent_id: agent_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = ConvertRequesterToAgent200Response;
    return this.apiClient.callApi(
      "/api/v2/agents/{agent_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Agent
   * Update an existing Agent in Freshservice
   * @param {module:model/Agent} agent Agent who needs to be updated
   * @param {Number} agent_id ID of agent to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConvertRequesterToAgent200Response}
   */
  updateAgent(agent, agent_id) {
    return this.updateAgentWithHttpInfo(agent, agent_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
