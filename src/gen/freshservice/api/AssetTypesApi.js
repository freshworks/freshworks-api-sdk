/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AssetType from "../model/AssetType";
import GetAssetType200Response from "../model/GetAssetType200Response";
import ListAssetTypeFields200Response from "../model/ListAssetTypeFields200Response";
import ListAssetTypes200Response from "../model/ListAssetTypes200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";

/**
 * AssetTypes service.
 * @module api/AssetTypesApi
 * @version 2.0.1
 */
export default class AssetTypesApi {
  /**
   * Constructs a new AssetTypesApi.
   * @alias module:api/AssetTypesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create a new Asset Type
   * Create a new Asset Type
   * @param {module:model/AssetType} Asset_Types
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAssetTypes200Response} and HTTP response
   */
  createAssetTypeWithHttpInfo(Asset_Types) {
    let postBody = Asset_Types;
    // verify the required parameter 'Asset_Types' is set
    if (Asset_Types === undefined || Asset_Types === null) {
      throw new Error("Missing the required parameter 'Asset_Types' when calling createAssetType");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = ListAssetTypes200Response;
    return this.apiClient.callApi(
      "/api/v2/asset_types",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a new Asset Type
   * Create a new Asset Type
   * @param {module:model/AssetType} Asset_Types
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAssetTypes200Response}
   */
  createAssetType(Asset_Types) {
    return this.createAssetTypeWithHttpInfo(Asset_Types).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete an existing Asset Type
   * Delete an existing Asset Type
   * @param {Number} asset_type_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteAssetTypeWithHttpInfo(asset_type_id) {
    let postBody = null;
    // verify the required parameter 'asset_type_id' is set
    if (asset_type_id === undefined || asset_type_id === null) {
      throw new Error("Missing the required parameter 'asset_type_id' when calling deleteAssetType");
    }

    let pathParams = {
      asset_type_id: asset_type_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/asset_types/{asset_type_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete an existing Asset Type
   * Delete an existing Asset Type
   * @param {Number} asset_type_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteAssetType(asset_type_id) {
    return this.deleteAssetTypeWithHttpInfo(asset_type_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Retrieve a specific asset type
   * Retrieve a specific asset type
   * @param {Number} asset_type_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAssetType200Response} and HTTP response
   */
  getAssetTypeWithHttpInfo(asset_type_id) {
    let postBody = null;
    // verify the required parameter 'asset_type_id' is set
    if (asset_type_id === undefined || asset_type_id === null) {
      throw new Error("Missing the required parameter 'asset_type_id' when calling getAssetType");
    }

    let pathParams = {
      asset_type_id: asset_type_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetAssetType200Response;
    return this.apiClient.callApi(
      "/api/v2/asset_types/{asset_type_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Retrieve a specific asset type
   * Retrieve a specific asset type
   * @param {Number} asset_type_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAssetType200Response}
   */
  getAssetType(asset_type_id) {
    return this.getAssetTypeWithHttpInfo(asset_type_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List all fields for an asset type (including default fields)
   * Retrieve the Asset Fields from Freshservice. The fields will be returned in the sequence that they are displayed on the UI (this includes the default fields common for all asset types and the fields specific to an asset type)
   * @param {Number} asset_type_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAssetTypeFields200Response} and HTTP response
   */
  listAssetTypeFieldsWithHttpInfo(asset_type_id) {
    let postBody = null;
    // verify the required parameter 'asset_type_id' is set
    if (asset_type_id === undefined || asset_type_id === null) {
      throw new Error("Missing the required parameter 'asset_type_id' when calling listAssetTypeFields");
    }

    let pathParams = {
      asset_type_id: asset_type_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListAssetTypeFields200Response;
    return this.apiClient.callApi(
      "/api/v2/asset_types/{asset_type_id}/fields",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List all fields for an asset type (including default fields)
   * Retrieve the Asset Fields from Freshservice. The fields will be returned in the sequence that they are displayed on the UI (this includes the default fields common for all asset types and the fields specific to an asset type)
   * @param {Number} asset_type_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAssetTypeFields200Response}
   */
  listAssetTypeFields(asset_type_id) {
    return this.listAssetTypeFieldsWithHttpInfo(asset_type_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Asset Types in Freshservice
   * Get a list of all Asset Types in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAssetTypes200Response} and HTTP response
   */
  listAssetTypesWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListAssetTypes200Response;
    return this.apiClient.callApi(
      "/api/v2/asset_types",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Asset Types in Freshservice
   * Get a list of all Asset Types in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAssetTypes200Response}
   */
  listAssetTypes(opts) {
    return this.listAssetTypesWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update an existing asset type
   * Update an existing asset type
   * @param {module:model/AssetType} asset_type
   * @param {Number} asset_type_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAssetType200Response} and HTTP response
   */
  updateAssetTypeWithHttpInfo(asset_type, asset_type_id) {
    let postBody = asset_type;
    // verify the required parameter 'asset_type' is set
    if (asset_type === undefined || asset_type === null) {
      throw new Error("Missing the required parameter 'asset_type' when calling updateAssetType");
    }
    // verify the required parameter 'asset_type_id' is set
    if (asset_type_id === undefined || asset_type_id === null) {
      throw new Error("Missing the required parameter 'asset_type_id' when calling updateAssetType");
    }

    let pathParams = {
      asset_type_id: asset_type_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = GetAssetType200Response;
    return this.apiClient.callApi(
      "/api/v2/asset_types/{asset_type_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update an existing asset type
   * Update an existing asset type
   * @param {module:model/AssetType} asset_type
   * @param {Number} asset_type_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAssetType200Response}
   */
  updateAssetType(asset_type, asset_type_id) {
    return this.updateAssetTypeWithHttpInfo(asset_type, asset_type_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
