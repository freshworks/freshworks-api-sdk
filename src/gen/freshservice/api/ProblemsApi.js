/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateChangeNote201Response from "../model/CreateChangeNote201Response";
import CreateProblem201Response from "../model/CreateProblem201Response";
import CreateTicketTask201Response from "../model/CreateTicketTask201Response";
import CreateTicketTimeEntry201Response from "../model/CreateTicketTimeEntry201Response";
import ListChangeNotes200Response from "../model/ListChangeNotes200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListProblems200Response from "../model/ListProblems200Response";
import ListTicketTasks200Response from "../model/ListTicketTasks200Response";
import ListTicketTimeEntries200Response from "../model/ListTicketTimeEntries200Response";
import Note from "../model/Note";
import Problem from "../model/Problem";
import Task from "../model/Task";
import TimeEntry from "../model/TimeEntry";

/**
 * Problems service.
 * @module api/ProblemsApi
 * @version 1.0.0
 */
export default class ProblemsApi {
  /**
   * Constructs a new ProblemsApi.
   * @alias module:api/ProblemsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Problem
   * Create a new Problem in Freshservice
   * @param {module:model/Problem} problem Details of the Problem
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProblem201Response} and HTTP response
   */
  createProblemWithHttpInfo(problem) {
    let postBody = problem;
    // verify the required parameter 'problem' is set
    if (problem === undefined || problem === null) {
      throw new Error("Missing the required parameter 'problem' when calling createProblem");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateProblem201Response;
    return this.apiClient.callApi(
      "/api/v2/problems",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Problem
   * Create a new Problem in Freshservice
   * @param {module:model/Problem} problem Details of the Problem
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProblem201Response}
   */
  createProblem(problem) {
    return this.createProblemWithHttpInfo(problem).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Note on a problem
   * Create a new note on a problem in freshservice
   * @param {module:model/Note} note Note content of problem
   * @param {Number} problem_id ID of problem for which notes are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  createProblemNoteWithHttpInfo(note, problem_id) {
    let postBody = note;
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error("Missing the required parameter 'note' when calling createProblemNote");
    }
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling createProblemNote");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/notes",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Note on a problem
   * Create a new note on a problem in freshservice
   * @param {module:model/Note} note Note content of problem
   * @param {Number} problem_id ID of problem for which notes are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  createProblemNote(note, problem_id) {
    return this.createProblemNoteWithHttpInfo(note, problem_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create Task on a problem
   * Create a new task on a problem in freshservice
   * @param {module:model/Task} task detailss of task to be created
   * @param {Number} problem_id ID of problem for which tasks are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  createProblemTaskWithHttpInfo(task, problem_id) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling createProblemTask");
    }
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling createProblemTask");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/tasks",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Task on a problem
   * Create a new task on a problem in freshservice
   * @param {module:model/Task} task detailss of task to be created
   * @param {Number} problem_id ID of problem for which tasks are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  createProblemTask(task, problem_id) {
    return this.createProblemTaskWithHttpInfo(task, problem_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create time entry on a problem
   * Create a new time entry on a problem in freshservice
   * @param {module:model/TimeEntry} time_entry details of time entry to be created
   * @param {Number} problem_id ID of problem for which time entries are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  createProblemTimeEntryWithHttpInfo(time_entry, problem_id) {
    let postBody = time_entry;
    // verify the required parameter 'time_entry' is set
    if (time_entry === undefined || time_entry === null) {
      throw new Error("Missing the required parameter 'time_entry' when calling createProblemTimeEntry");
    }
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling createProblemTimeEntry");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/time_entries",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create time entry on a problem
   * Create a new time entry on a problem in freshservice
   * @param {module:model/TimeEntry} time_entry details of time entry to be created
   * @param {Number} problem_id ID of problem for which time entries are to be retrieved
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  createProblemTimeEntry(time_entry, problem_id) {
    return this.createProblemTimeEntryWithHttpInfo(time_entry, problem_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Problem
   * Delete the Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProblemWithHttpInfo(problem_id) {
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling deleteProblem");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/problem/{problem_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Problem
   * Delete the Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProblem(problem_id) {
    return this.deleteProblemWithHttpInfo(problem_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete note on a problem
   * Delete the note on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} note_id ID of note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProblemNoteWithHttpInfo(problem_id, note_id) {
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling deleteProblemNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling deleteProblemNote");
    }

    let pathParams = {
      problem_id: problem_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/notes/{note_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete note on a problem
   * Delete the note on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} note_id ID of note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProblemNote(problem_id, note_id) {
    return this.deleteProblemNoteWithHttpInfo(problem_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete task on a problem
   * Delete the task on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} task_id ID of task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProblemTaskWithHttpInfo(problem_id, task_id) {
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling deleteProblemTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling deleteProblemTask");
    }

    let pathParams = {
      problem_id: problem_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/tasks/{task_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete task on a problem
   * Delete the task on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} task_id ID of task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProblemTask(problem_id, task_id) {
    return this.deleteProblemTaskWithHttpInfo(problem_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a time entry on a problem
   * Delete the time entry on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteProblemTimeEntryWithHttpInfo(problem_id, time_entry_id) {
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling deleteProblemTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling deleteProblemTimeEntry");
    }

    let pathParams = {
      problem_id: problem_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/time_entries/{time_entry_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a time entry on a problem
   * Delete the time entry on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteProblemTimeEntry(problem_id, time_entry_id) {
    return this.deleteProblemTimeEntryWithHttpInfo(problem_id, time_entry_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Problem
   * Retrieve the Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of Problem to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProblem201Response} and HTTP response
   */
  getProblemWithHttpInfo(problem_id) {
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling getProblem");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateProblem201Response;
    return this.apiClient.callApi(
      "/api/v2/problem/{problem_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Problem
   * Retrieve the Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of Problem to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProblem201Response}
   */
  getProblem(problem_id) {
    return this.getProblemWithHttpInfo(problem_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View note on a problem
   * Retrieve a note on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  getProblemNoteWithHttpInfo(problem_id, note_id) {
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling getProblemNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling getProblemNote");
    }

    let pathParams = {
      problem_id: problem_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/notes/{note_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View note on a problem
   * Retrieve a note on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  getProblemNote(problem_id, note_id) {
    return this.getProblemNoteWithHttpInfo(problem_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View task on a problem
   * Retrieve a task on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  getProblemTaskWithHttpInfo(problem_id, task_id) {
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling getProblemTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling getProblemTask");
    }

    let pathParams = {
      problem_id: problem_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/tasks/{task_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View task on a problem
   * Retrieve a task on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  getProblemTask(problem_id, task_id) {
    return this.getProblemTaskWithHttpInfo(problem_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View time entry on a problem
   * Retrieve a time entry on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  getProblemTimeEntryWithHttpInfo(problem_id, time_entry_id) {
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling getProblemTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling getProblemTimeEntry");
    }

    let pathParams = {
      problem_id: problem_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/time_entries/{time_entry_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View time entry on a problem
   * Retrieve a time entry on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  getProblemTimeEntry(problem_id, time_entry_id) {
    return this.getProblemTimeEntryWithHttpInfo(problem_id, time_entry_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View notes on problem
   * Retrieve the notes on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem for which notes are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of notes to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListChangeNotes200Response} and HTTP response
   */
  listProblemNotesWithHttpInfo(problem_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling listProblemNotes");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListChangeNotes200Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/notes",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View notes on problem
   * Retrieve the notes on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem for which notes are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of notes to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListChangeNotes200Response}
   */
  listProblemNotes(problem_id, opts) {
    return this.listProblemNotesWithHttpInfo(problem_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View tasks on problem
   * Retrieve the tasks on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem for which tasks are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of tasks to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketTasks200Response} and HTTP response
   */
  listProblemTasksWithHttpInfo(problem_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling listProblemTasks");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketTasks200Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/tasks",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View tasks on problem
   * Retrieve the tasks on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem for which tasks are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of tasks to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketTasks200Response}
   */
  listProblemTasks(problem_id, opts) {
    return this.listProblemTasksWithHttpInfo(problem_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View time entries on problem
   * Retrieve the time entries on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem for which time entries are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of time entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTicketTimeEntries200Response} and HTTP response
   */
  listProblemTimeEntriesWithHttpInfo(problem_id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling listProblemTimeEntries");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListTicketTimeEntries200Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/time_entries",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View time entries on problem
   * Retrieve the time entries on a Problem with the given ID from Freshservice
   * @param {Number} problem_id ID of problem for which time entries are to be retrieved
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of time entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTicketTimeEntries200Response}
   */
  listProblemTimeEntries(problem_id, opts) {
    return this.listProblemTimeEntriesWithHttpInfo(problem_id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Problems
   * Retrieve a list of all Problems in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Date} opts.updated_since Retrieve the problems by when it was last updated
   * @param {Number} opts.per_page The number of problems to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProblems200Response} and HTTP response
   */
  listProblemsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      updated_since: opts["updated_since"],
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListProblems200Response;
    return this.apiClient.callApi(
      "/api/v2/problems",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Problems
   * Retrieve a list of all Problems in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Date} opts.updated_since Retrieve the problems by when it was last updated
   * @param {Number} opts.per_page The number of problems to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProblems200Response}
   */
  listProblems(opts) {
    return this.listProblemsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Problem
   * Update an existing Problem in Freshservice
   * @param {module:model/Problem} problem Problem details that needs to be updated
   * @param {Number} problem_id ID of problem to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProblem201Response} and HTTP response
   */
  updateProblemWithHttpInfo(problem, problem_id) {
    let postBody = problem;
    // verify the required parameter 'problem' is set
    if (problem === undefined || problem === null) {
      throw new Error("Missing the required parameter 'problem' when calling updateProblem");
    }
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling updateProblem");
    }

    let pathParams = {
      problem_id: problem_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateProblem201Response;
    return this.apiClient.callApi(
      "/api/v2/problem/{problem_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Problem
   * Update an existing Problem in Freshservice
   * @param {module:model/Problem} problem Problem details that needs to be updated
   * @param {Number} problem_id ID of problem to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProblem201Response}
   */
  updateProblem(problem, problem_id) {
    return this.updateProblemWithHttpInfo(problem, problem_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a note on a problem
   * Update an existing note on an existing Problem in Freshservice
   * @param {module:model/Note} note note details that needs to be updated
   * @param {Number} problem_id ID of problem
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChangeNote201Response} and HTTP response
   */
  updateProblemNoteWithHttpInfo(note, problem_id, note_id) {
    let postBody = note;
    // verify the required parameter 'note' is set
    if (note === undefined || note === null) {
      throw new Error("Missing the required parameter 'note' when calling updateProblemNote");
    }
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling updateProblemNote");
    }
    // verify the required parameter 'note_id' is set
    if (note_id === undefined || note_id === null) {
      throw new Error("Missing the required parameter 'note_id' when calling updateProblemNote");
    }

    let pathParams = {
      problem_id: problem_id,
      note_id: note_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateChangeNote201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/notes/{note_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a note on a problem
   * Update an existing note on an existing Problem in Freshservice
   * @param {module:model/Note} note note details that needs to be updated
   * @param {Number} problem_id ID of problem
   * @param {Number} note_id ID of the note
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateChangeNote201Response}
   */
  updateProblemNote(note, problem_id, note_id) {
    return this.updateProblemNoteWithHttpInfo(note, problem_id, note_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a task on a problem
   * Update an existing task on an existing Problem in Freshservice
   * @param {module:model/Task} task tassk details that needs to be updated
   * @param {Number} problem_id ID of problem
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTask201Response} and HTTP response
   */
  updateProblemTaskWithHttpInfo(task, problem_id, task_id) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling updateProblemTask");
    }
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling updateProblemTask");
    }
    // verify the required parameter 'task_id' is set
    if (task_id === undefined || task_id === null) {
      throw new Error("Missing the required parameter 'task_id' when calling updateProblemTask");
    }

    let pathParams = {
      problem_id: problem_id,
      task_id: task_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTask201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/tasks/{task_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a task on a problem
   * Update an existing task on an existing Problem in Freshservice
   * @param {module:model/Task} task tassk details that needs to be updated
   * @param {Number} problem_id ID of problem
   * @param {Number} task_id ID of the task
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTask201Response}
   */
  updateProblemTask(task, problem_id, task_id) {
    return this.updateProblemTaskWithHttpInfo(task, problem_id, task_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a time entry on a problem
   * Update an existing time entry on an existing Problem in Freshservice
   * @param {module:model/TimeEntry} time_entry time entry details that needs to be updated
   * @param {Number} problem_id ID of problem
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTicketTimeEntry201Response} and HTTP response
   */
  updateProblemTimeEntryWithHttpInfo(time_entry, problem_id, time_entry_id) {
    let postBody = time_entry;
    // verify the required parameter 'time_entry' is set
    if (time_entry === undefined || time_entry === null) {
      throw new Error("Missing the required parameter 'time_entry' when calling updateProblemTimeEntry");
    }
    // verify the required parameter 'problem_id' is set
    if (problem_id === undefined || problem_id === null) {
      throw new Error("Missing the required parameter 'problem_id' when calling updateProblemTimeEntry");
    }
    // verify the required parameter 'time_entry_id' is set
    if (time_entry_id === undefined || time_entry_id === null) {
      throw new Error("Missing the required parameter 'time_entry_id' when calling updateProblemTimeEntry");
    }

    let pathParams = {
      problem_id: problem_id,
      time_entry_id: time_entry_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateTicketTimeEntry201Response;
    return this.apiClient.callApi(
      "/api/v2/problems/{problem_id}/time_entries/{time_entry_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a time entry on a problem
   * Update an existing time entry on an existing Problem in Freshservice
   * @param {module:model/TimeEntry} time_entry time entry details that needs to be updated
   * @param {Number} problem_id ID of problem
   * @param {Number} time_entry_id ID of the time entry
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTicketTimeEntry201Response}
   */
  updateProblemTimeEntry(time_entry, problem_id, time_entry_id) {
    return this.updateProblemTimeEntryWithHttpInfo(time_entry, problem_id, time_entry_id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
