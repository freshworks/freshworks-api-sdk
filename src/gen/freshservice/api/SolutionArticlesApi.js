/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateSolutionArticle200Response from "../model/CreateSolutionArticle200Response";
import CreateSolutionCategory200Response from "../model/CreateSolutionCategory200Response";
import CreateSolutionFolder200Response from "../model/CreateSolutionFolder200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ListSolutionArticle200Response from "../model/ListSolutionArticle200Response";
import ListSolutionCategory200Response from "../model/ListSolutionCategory200Response";
import ListSolutionFolders200Response from "../model/ListSolutionFolders200Response";
import SolutionArticle from "../model/SolutionArticle";
import SolutionCategory from "../model/SolutionCategory";
import SolutionFolder from "../model/SolutionFolder";

/**
 * SolutionArticles service.
 * @module api/SolutionArticlesApi
 * @version 1.0.0
 */
export default class SolutionArticlesApi {
  /**
   * Constructs a new SolutionArticlesApi.
   * @alias module:api/SolutionArticlesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create a solution article in a folder
   * Create a new solution article in Freshservice
   * @param {module:model/SolutionArticle} solution_article Article that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSolutionArticle200Response} and HTTP response
   */
  createSolutionArticleWithHttpInfo(solution_article) {
    let postBody = solution_article;
    // verify the required parameter 'solution_article' is set
    if (solution_article === undefined || solution_article === null) {
      throw new Error("Missing the required parameter 'solution_article' when calling createSolutionArticle");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateSolutionArticle200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/articles",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a solution article in a folder
   * Create a new solution article in Freshservice
   * @param {module:model/SolutionArticle} solution_article Article that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSolutionArticle200Response}
   */
  createSolutionArticle(solution_article) {
    return this.createSolutionArticleWithHttpInfo(solution_article).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create a solution category
   * Create a new solution category in Freshservice
   * @param {module:model/SolutionCategory} solution_category Solution Category that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSolutionCategory200Response} and HTTP response
   */
  createSolutionCategoryWithHttpInfo(solution_category) {
    let postBody = solution_category;
    // verify the required parameter 'solution_category' is set
    if (solution_category === undefined || solution_category === null) {
      throw new Error("Missing the required parameter 'solution_category' when calling createSolutionCategory");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateSolutionCategory200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/categories",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a solution category
   * Create a new solution category in Freshservice
   * @param {module:model/SolutionCategory} solution_category Solution Category that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSolutionCategory200Response}
   */
  createSolutionCategory(solution_category) {
    return this.createSolutionCategoryWithHttpInfo(solution_category).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create a solution folder
   * Create a new solution folder in Freshservice
   * @param {module:model/SolutionFolder} solution_folder Folder that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSolutionFolder200Response} and HTTP response
   */
  createSolutionFolderWithHttpInfo(solution_folder) {
    let postBody = solution_folder;
    // verify the required parameter 'solution_folder' is set
    if (solution_folder === undefined || solution_folder === null) {
      throw new Error("Missing the required parameter 'solution_folder' when calling createSolutionFolder");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateSolutionFolder200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/folders",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a solution folder
   * Create a new solution folder in Freshservice
   * @param {module:model/SolutionFolder} solution_folder Folder that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSolutionFolder200Response}
   */
  createSolutionFolder(solution_folder) {
    return this.createSolutionFolderWithHttpInfo(solution_folder).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a solution article
   * Delete the solution article with the given ID from Freshservice
   * @param {Number} article_id ID of the solution article to delete
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteSolutionArticleWithHttpInfo(article_id) {
    let postBody = null;
    // verify the required parameter 'article_id' is set
    if (article_id === undefined || article_id === null) {
      throw new Error("Missing the required parameter 'article_id' when calling deleteSolutionArticle");
    }

    let pathParams = {
      article_id: article_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/solutions/articles/{article_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a solution article
   * Delete the solution article with the given ID from Freshservice
   * @param {Number} article_id ID of the solution article to delete
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteSolutionArticle(article_id) {
    return this.deleteSolutionArticleWithHttpInfo(article_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a solution category
   * Delete the solution category with the given ID from Freshservice
   * @param {Number} category_id ID of the solution category which has to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteSolutionCategoryWithHttpInfo(category_id) {
    let postBody = null;
    // verify the required parameter 'category_id' is set
    if (category_id === undefined || category_id === null) {
      throw new Error("Missing the required parameter 'category_id' when calling deleteSolutionCategory");
    }

    let pathParams = {
      category_id: category_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/solutions/categories/{category_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a solution category
   * Delete the solution category with the given ID from Freshservice
   * @param {Number} category_id ID of the solution category which has to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteSolutionCategory(category_id) {
    return this.deleteSolutionCategoryWithHttpInfo(category_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete a solution folder
   * Delete the solution folder with the given ID from Freshservice
   * @param {Number} folder_id ID of the solution folder that has to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteSolutionFolderWithHttpInfo(folder_id) {
    let postBody = null;
    // verify the required parameter 'folder_id' is set
    if (folder_id === undefined || folder_id === null) {
      throw new Error("Missing the required parameter 'folder_id' when calling deleteSolutionFolder");
    }

    let pathParams = {
      folder_id: folder_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/solutions/folders/{folder_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a solution folder
   * Delete the solution folder with the given ID from Freshservice
   * @param {Number} folder_id ID of the solution folder that has to be deleted
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteSolutionFolder(folder_id) {
    return this.deleteSolutionFolderWithHttpInfo(folder_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View a solution article
   * View a solution article
   * @param {Number} article_id ID of solution article
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSolutionArticle200Response} and HTTP response
   */
  getSolutionArticleWithHttpInfo(article_id) {
    let postBody = null;
    // verify the required parameter 'article_id' is set
    if (article_id === undefined || article_id === null) {
      throw new Error("Missing the required parameter 'article_id' when calling getSolutionArticle");
    }

    let pathParams = {
      article_id: article_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateSolutionArticle200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/articles/{article_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View a solution article
   * View a solution article
   * @param {Number} article_id ID of solution article
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSolutionArticle200Response}
   */
  getSolutionArticle(article_id) {
    return this.getSolutionArticleWithHttpInfo(article_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View a solution category
   * View a solution category
   * @param {Number} category_id ID of solution category
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSolutionCategory200Response} and HTTP response
   */
  getSolutionCategoryWithHttpInfo(category_id) {
    let postBody = null;
    // verify the required parameter 'category_id' is set
    if (category_id === undefined || category_id === null) {
      throw new Error("Missing the required parameter 'category_id' when calling getSolutionCategory");
    }

    let pathParams = {
      category_id: category_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateSolutionCategory200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/categories/{category_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View a solution category
   * View a solution category
   * @param {Number} category_id ID of solution category
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSolutionCategory200Response}
   */
  getSolutionCategory(category_id) {
    return this.getSolutionCategoryWithHttpInfo(category_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View a solution folder
   * View a solution folder
   * @param {Number} folder_id ID of solution folder
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSolutionFolder200Response} and HTTP response
   */
  getSolutionFolderWithHttpInfo(folder_id) {
    let postBody = null;
    // verify the required parameter 'folder_id' is set
    if (folder_id === undefined || folder_id === null) {
      throw new Error("Missing the required parameter 'folder_id' when calling getSolutionFolder");
    }

    let pathParams = {
      folder_id: folder_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateSolutionFolder200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/folders/{folder_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View a solution folder
   * View a solution folder
   * @param {Number} folder_id ID of solution folder
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSolutionFolder200Response}
   */
  getSolutionFolder(folder_id) {
    return this.getSolutionFolderWithHttpInfo(folder_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Solution articles
   * Retrieve a list of all Solution articles in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @param {Number} opts.folder_id The ID of the folder whose solution articles have to be listed.
   * @param {Number} opts.category_id The ID of the category whose solution articles have to be listed.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSolutionArticle200Response} and HTTP response
   */
  listSolutionArticleWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"],
      folder_id: opts["folder_id"],
      category_id: opts["category_id"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListSolutionArticle200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/articles",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Solution articles
   * Retrieve a list of all Solution articles in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @param {Number} opts.folder_id The ID of the folder whose solution articles have to be listed.
   * @param {Number} opts.category_id The ID of the category whose solution articles have to be listed.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSolutionArticle200Response}
   */
  listSolutionArticle(opts) {
    return this.listSolutionArticleWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Solution Categories
   * Retrieve a list of all Solution Categories in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSolutionCategory200Response} and HTTP response
   */
  listSolutionCategoryWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListSolutionCategory200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/categories",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Solution Categories
   * Retrieve a list of all Solution Categories in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSolutionCategory200Response}
   */
  listSolutionCategory(opts) {
    return this.listSolutionCategoryWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Solution Folders
   * Retrieve a list of all Solution Folders in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.category_id ID of solution category in which the folders reside
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSolutionFolders200Response} and HTTP response
   */
  listSolutionFoldersWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      category_id: opts["category_id"],
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListSolutionFolders200Response;
    return this.apiClient.callApi(
      "/api/v2/solutions/folders",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Solution Folders
   * Retrieve a list of all Solution Folders in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.category_id ID of solution category in which the folders reside
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSolutionFolders200Response}
   */
  listSolutionFolders(opts) {
    return this.listSolutionFoldersWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a solution article
   * Update the solution article with the given ID from Freshservice
   * @param {module:model/SolutionArticle} solution_article Article that needs to be created
   * @param {Number} article_id ID of the solution article to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  updateSolutionArticleWithHttpInfo(solution_article, article_id) {
    let postBody = solution_article;
    // verify the required parameter 'solution_article' is set
    if (solution_article === undefined || solution_article === null) {
      throw new Error("Missing the required parameter 'solution_article' when calling updateSolutionArticle");
    }
    // verify the required parameter 'article_id' is set
    if (article_id === undefined || article_id === null) {
      throw new Error("Missing the required parameter 'article_id' when calling updateSolutionArticle");
    }

    let pathParams = {
      article_id: article_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/solutions/articles/{article_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a solution article
   * Update the solution article with the given ID from Freshservice
   * @param {module:model/SolutionArticle} solution_article Article that needs to be created
   * @param {Number} article_id ID of the solution article to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  updateSolutionArticle(solution_article, article_id) {
    return this.updateSolutionArticleWithHttpInfo(solution_article, article_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a solution category
   * Update the solution category with the given ID from Freshservice
   * @param {module:model/SolutionCategory} solution_category Category that needs to be updated
   * @param {Number} category_id ID of the solution category which has to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  updateSolutionCategoryWithHttpInfo(solution_category, category_id) {
    let postBody = solution_category;
    // verify the required parameter 'solution_category' is set
    if (solution_category === undefined || solution_category === null) {
      throw new Error("Missing the required parameter 'solution_category' when calling updateSolutionCategory");
    }
    // verify the required parameter 'category_id' is set
    if (category_id === undefined || category_id === null) {
      throw new Error("Missing the required parameter 'category_id' when calling updateSolutionCategory");
    }

    let pathParams = {
      category_id: category_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/solutions/categories/{category_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a solution category
   * Update the solution category with the given ID from Freshservice
   * @param {module:model/SolutionCategory} solution_category Category that needs to be updated
   * @param {Number} category_id ID of the solution category which has to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  updateSolutionCategory(solution_category, category_id) {
    return this.updateSolutionCategoryWithHttpInfo(solution_category, category_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a solution folder
   * Update the solution folder with the given ID from Freshservice
   * @param {module:model/SolutionFolder} solution_folder Folder that needs to be created
   * @param {Number} folder_id ID of the solution folder that has to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  updateSolutionFolderWithHttpInfo(solution_folder, folder_id) {
    let postBody = solution_folder;
    // verify the required parameter 'solution_folder' is set
    if (solution_folder === undefined || solution_folder === null) {
      throw new Error("Missing the required parameter 'solution_folder' when calling updateSolutionFolder");
    }
    // verify the required parameter 'folder_id' is set
    if (folder_id === undefined || folder_id === null) {
      throw new Error("Missing the required parameter 'folder_id' when calling updateSolutionFolder");
    }

    let pathParams = {
      folder_id: folder_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/solutions/folders/{folder_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a solution folder
   * Update the solution folder with the given ID from Freshservice
   * @param {module:model/SolutionFolder} solution_folder Folder that needs to be created
   * @param {Number} folder_id ID of the solution folder that has to be updated
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  updateSolutionFolder(solution_folder, folder_id) {
    return this.updateSolutionFolderWithHttpInfo(solution_folder, folder_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
