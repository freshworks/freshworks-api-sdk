/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateServiceRequest200Response from "../model/CreateServiceRequest200Response";
import GetServiceItem200Response from "../model/GetServiceItem200Response";
import ListCatalogItemFields200Response from "../model/ListCatalogItemFields200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";
import ServiceRequest from "../model/ServiceRequest";
import ServiceRequestUpdate from "../model/ServiceRequestUpdate";
import UpdateServiceRequest200Response from "../model/UpdateServiceRequest200Response";

/**
 * ServiceCatalog service.
 * @module api/ServiceCatalogApi
 * @version 2.0.1
 */
export default class ServiceCatalogApi {
  /**
   * Constructs a new ServiceCatalogApi.
   * @alias module:api/ServiceCatalogApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create a Service Request
   * Create a service request in Freshservice
   * @param {module:model/ServiceRequest} service_request Service request that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateServiceRequest200Response} and HTTP response
   */
  createServiceRequestWithHttpInfo(service_request) {
    let postBody = service_request;
    // verify the required parameter 'service_request' is set
    if (service_request === undefined || service_request === null) {
      throw new Error("Missing the required parameter 'service_request' when calling createServiceRequest");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateServiceRequest200Response;
    return this.apiClient.callApi(
      "/api/v2/service_requests",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create a Service Request
   * Create a service request in Freshservice
   * @param {module:model/ServiceRequest} service_request Service request that needs to be created
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateServiceRequest200Response}
   */
  createServiceRequest(service_request) {
    return this.createServiceRequestWithHttpInfo(service_request).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View a Service Item
   * View a Service item
   * @param {Number} service_item_id ID of service item to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetServiceItem200Response} and HTTP response
   */
  getServiceItemWithHttpInfo(service_item_id) {
    let postBody = null;
    // verify the required parameter 'service_item_id' is set
    if (service_item_id === undefined || service_item_id === null) {
      throw new Error("Missing the required parameter 'service_item_id' when calling getServiceItem");
    }

    let pathParams = {
      service_item_id: service_item_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetServiceItem200Response;
    return this.apiClient.callApi(
      "/api/v2/service_items/{service_item_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View a Service Item
   * View a Service item
   * @param {Number} service_item_id ID of service item to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetServiceItem200Response}
   */
  getServiceItem(service_item_id) {
    return this.getServiceItemWithHttpInfo(service_item_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View all fields of the service item
   * View all fields of the service item
   * @param {Number} service_item_id ID of service item to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCatalogItemFields200Response} and HTTP response
   */
  listCatalogItemFieldsWithHttpInfo(service_item_id) {
    let postBody = null;
    // verify the required parameter 'service_item_id' is set
    if (service_item_id === undefined || service_item_id === null) {
      throw new Error("Missing the required parameter 'service_item_id' when calling listCatalogItemFields");
    }

    let pathParams = {
      service_item_id: service_item_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListCatalogItemFields200Response;
    return this.apiClient.callApi(
      "/api/v2/catalog/item/{service_item_id}/fields",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View all fields of the service item
   * View all fields of the service item
   * @param {Number} service_item_id ID of service item to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCatalogItemFields200Response}
   */
  listCatalogItemFields(service_item_id) {
    return this.listCatalogItemFieldsWithHttpInfo(service_item_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Service Items
   * Retrieve a list of all Service Items in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetServiceItem200Response} and HTTP response
   */
  listServiceItemsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = GetServiceItem200Response;
    return this.apiClient.callApi(
      "/api/v2/service_items",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Service Items
   * Retrieve a list of all Service Items in Freshservice
   * @param {Object} opts Optional parameters
   * @param {Number} opts.per_page The number of entries to retrieve in each page of a paginated list. (default to 10)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetServiceItem200Response}
   */
  listServiceItems(opts) {
    return this.listServiceItemsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a service request
   * Update an existing Service request in Freshservice
   * @param {module:model/ServiceRequestUpdate} service_request Service request to be updated
   * @param {Number} service_request_id ID of Service Request to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateServiceRequest200Response} and HTTP response
   */
  updateServiceRequestWithHttpInfo(service_request, service_request_id) {
    let postBody = service_request;
    // verify the required parameter 'service_request' is set
    if (service_request === undefined || service_request === null) {
      throw new Error("Missing the required parameter 'service_request' when calling updateServiceRequest");
    }
    // verify the required parameter 'service_request_id' is set
    if (service_request_id === undefined || service_request_id === null) {
      throw new Error("Missing the required parameter 'service_request_id' when calling updateServiceRequest");
    }

    let pathParams = {
      service_request_id: service_request_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = UpdateServiceRequest200Response;
    return this.apiClient.callApi(
      "/api/v2/service_requests/{service_request_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a service request
   * Update an existing Service request in Freshservice
   * @param {module:model/ServiceRequestUpdate} service_request Service request to be updated
   * @param {Number} service_request_id ID of Service Request to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateServiceRequest200Response}
   */
  updateServiceRequest(service_request, service_request_id) {
    return this.updateServiceRequestWithHttpInfo(service_request, service_request_id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
