/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Announcement from "../model/Announcement";
import CreateAnnouncement201Response from "../model/CreateAnnouncement201Response";
import ListAnnouncement200Response from "../model/ListAnnouncement200Response";
import ListDepartments401Response from "../model/ListDepartments401Response";

/**
 * Announcements service.
 * @module api/AnnouncementsApi
 * @version 1.0.0
 */
export default class AnnouncementsApi {
  /**
   * Constructs a new AnnouncementsApi.
   * @alias module:api/AnnouncementsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create Announcement
   * Create a new Announcement request in Freshservice
   * @param {module:model/Announcement} announcement Details of the Announcement
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAnnouncement201Response} and HTTP response
   */
  createAnnouncementWithHttpInfo(announcement) {
    let postBody = announcement;
    // verify the required parameter 'announcement' is set
    if (announcement === undefined || announcement === null) {
      throw new Error("Missing the required parameter 'announcement' when calling createAnnouncement");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateAnnouncement201Response;
    return this.apiClient.callApi(
      "/api/v2/announcements",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create Announcement
   * Create a new Announcement request in Freshservice
   * @param {module:model/Announcement} announcement Details of the Announcement
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAnnouncement201Response}
   */
  createAnnouncement(announcement) {
    return this.createAnnouncementWithHttpInfo(announcement).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Announcement
   * Delete the Announcement with the given ID from Freshservice
   * @param {Number} announcement_id ID of announcement to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteAnnouncementWithHttpInfo(announcement_id) {
    let postBody = null;
    // verify the required parameter 'announcement_id' is set
    if (announcement_id === undefined || announcement_id === null) {
      throw new Error("Missing the required parameter 'announcement_id' when calling deleteAnnouncement");
    }

    let pathParams = {
      announcement_id: announcement_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["*/*"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v2/announcements/{announcement_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete Announcement
   * Delete the Announcement with the given ID from Freshservice
   * @param {Number} announcement_id ID of announcement to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteAnnouncement(announcement_id) {
    return this.deleteAnnouncementWithHttpInfo(announcement_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * View Announcement
   * Retrieve the Announcement with the given ID from Freshservice
   * @param {Number} announcement_id ID of Announcement to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAnnouncement201Response} and HTTP response
   */
  getAnnouncementWithHttpInfo(announcement_id) {
    let postBody = null;
    // verify the required parameter 'announcement_id' is set
    if (announcement_id === undefined || announcement_id === null) {
      throw new Error("Missing the required parameter 'announcement_id' when calling getAnnouncement");
    }

    let pathParams = {
      announcement_id: announcement_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CreateAnnouncement201Response;
    return this.apiClient.callApi(
      "/api/v2/announcements/{announcement_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * View Announcement
   * Retrieve the Announcement with the given ID from Freshservice
   * @param {Number} announcement_id ID of Announcement to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAnnouncement201Response}
   */
  getAnnouncement(announcement_id) {
    return this.getAnnouncementWithHttpInfo(announcement_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List All Announcements
   * Retrieve a list of all Announcements in Freshservice
   * @param {Object} opts Optional parameters
   * @param {String} opts.state (archived, active, scheduled, unread)
   * @param {Number} opts.per_page The number of Announcements to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAnnouncement200Response} and HTTP response
   */
  listAnnouncementWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      state: opts["state"],
      per_page: opts["per_page"],
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ListAnnouncement200Response;
    return this.apiClient.callApi(
      "/api/v2/announcements",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List All Announcements
   * Retrieve a list of all Announcements in Freshservice
   * @param {Object} opts Optional parameters
   * @param {String} opts.state (archived, active, scheduled, unread)
   * @param {Number} opts.per_page The number of Announcements to retrieve in each page of a paginated list. (default to 30)
   * @param {Number} opts.page The page number to retrieve. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAnnouncement200Response}
   */
  listAnnouncement(opts) {
    return this.listAnnouncementWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Announcement
   * Update an existing Announcement in Freshservice
   * @param {module:model/Announcement} announcement Announcement details that needs to be updated
   * @param {Number} announcement_id ID of announcement to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAnnouncement201Response} and HTTP response
   */
  updateAnnouncementWithHttpInfo(announcement, announcement_id) {
    let postBody = announcement;
    // verify the required parameter 'announcement' is set
    if (announcement === undefined || announcement === null) {
      throw new Error("Missing the required parameter 'announcement' when calling updateAnnouncement");
    }
    // verify the required parameter 'announcement_id' is set
    if (announcement_id === undefined || announcement_id === null) {
      throw new Error("Missing the required parameter 'announcement_id' when calling updateAnnouncement");
    }

    let pathParams = {
      announcement_id: announcement_id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = CreateAnnouncement201Response;
    return this.apiClient.callApi(
      "/api/v2/announcements/{announcement_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update Announcement
   * Update an existing Announcement in Freshservice
   * @param {module:model/Announcement} announcement Announcement details that needs to be updated
   * @param {Number} announcement_id ID of announcement to update
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAnnouncement201Response}
   */
  updateAnnouncement(announcement, announcement_id) {
    return this.updateAnnouncementWithHttpInfo(announcement, announcement_id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
