/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The InstalledApplications model module.
 * @module model/InstalledApplications
 * @version 2.0.1
 */
class InstalledApplications {
  /**
   * Constructs a new <code>InstalledApplications</code>.
   * @alias module:model/InstalledApplications
   */
  constructor() {
    InstalledApplications.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>InstalledApplications</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InstalledApplications} obj Optional instance to populate.
   * @return {module:model/InstalledApplications} The populated <code>InstalledApplications</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new InstalledApplications();

      if (data.hasOwnProperty("application_id")) {
        obj["application_id"] = ApiClient.convertToType(data["application_id"], "Number");
      }
      if (data.hasOwnProperty("version")) {
        obj["version"] = ApiClient.convertToType(data["version"], "Number");
      }
      if (data.hasOwnProperty("status")) {
        obj["status"] = ApiClient.convertToType(data["status"], "String");
      }
      if (data.hasOwnProperty("installation_date")) {
        obj["installation_date"] = ApiClient.convertToType(data["installation_date"], "Date");
      }
      if (data.hasOwnProperty("installation_path")) {
        obj["installation_path"] = ApiClient.convertToType(data["installation_path"], "String");
      }
      if (data.hasOwnProperty("created_time")) {
        obj["created_time"] = ApiClient.convertToType(data["created_time"], "Date");
      }
      if (data.hasOwnProperty("updated_time")) {
        obj["updated_time"] = ApiClient.convertToType(data["updated_time"], "Date");
      }
    }
    return obj;
  }
}

/**
 * ID of the application
 * @member {Number} application_id
 */
InstalledApplications.prototype["application_id"] = undefined;

/**
 * Version of the application installed in the device
 * @member {Number} version
 */
InstalledApplications.prototype["version"] = undefined;

/**
 * Status of the application (can be ignored/blacklisted/managed/null)
 * @member {module:model/InstalledApplications.StatusEnum} status
 */
InstalledApplications.prototype["status"] = undefined;

/**
 * Date when the application was installed
 * @member {Date} installation_date
 */
InstalledApplications.prototype["installation_date"] = undefined;

/**
 * The installation path of the application
 * @member {String} installation_path
 */
InstalledApplications.prototype["installation_path"] = undefined;

/**
 * Timestamp at which the application installation was created
 * @member {Date} created_time
 */
InstalledApplications.prototype["created_time"] = undefined;

/**
 * Timestamp at which the application installation was last modified
 * @member {Date} updated_time
 */
InstalledApplications.prototype["updated_time"] = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
InstalledApplications["StatusEnum"] = {
  /**
   * value: "Ignored"
   * @const
   */
  Ignored: "Ignored",

  /**
   * value: "Blacklisted"
   * @const
   */
  Blacklisted: "Blacklisted",

  /**
   * value: "Managed"
   * @const
   */
  Managed: "Managed"
};

export default InstalledApplications;
