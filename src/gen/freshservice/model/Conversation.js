/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Attachment from "./Attachment";

/**
 * The Conversation model module.
 * @module model/Conversation
 * @version 1.0.0
 */
class Conversation {
  /**
   * Constructs a new <code>Conversation</code>.
   * @alias module:model/Conversation
   */
  constructor() {
    Conversation.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Conversation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Conversation} obj Optional instance to populate.
   * @return {module:model/Conversation} The populated <code>Conversation</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Conversation();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("user_id")) {
        obj["user_id"] = ApiClient.convertToType(data["user_id"], "Number");
      }
      if (data.hasOwnProperty("source")) {
        obj["source"] = ApiClient.convertToType(data["source"], "Number");
      }
      if (data.hasOwnProperty("incoming")) {
        obj["incoming"] = ApiClient.convertToType(data["incoming"], "Boolean");
      }
      if (data.hasOwnProperty("created_at")) {
        obj["created_at"] = ApiClient.convertToType(data["created_at"], "String");
      }
      if (data.hasOwnProperty("updated_at")) {
        obj["updated_at"] = ApiClient.convertToType(data["updated_at"], "String");
      }
      if (data.hasOwnProperty("body")) {
        obj["body"] = ApiClient.convertToType(data["body"], "String");
      }
      if (data.hasOwnProperty("body_text")) {
        obj["body_text"] = ApiClient.convertToType(data["body_text"], "String");
      }
      if (data.hasOwnProperty("attachments")) {
        obj["attachments"] = ApiClient.convertToType(data["attachments"], [Attachment]);
      }
      if (data.hasOwnProperty("change_id")) {
        obj["change_id"] = ApiClient.convertToType(data["change_id"], "Number");
      }
      if (data.hasOwnProperty("ticket_id")) {
        obj["ticket_id"] = ApiClient.convertToType(data["ticket_id"], "Number");
      }
      if (data.hasOwnProperty("from_email")) {
        obj["from_email"] = ApiClient.convertToType(data["from_email"], "String");
      }
      if (data.hasOwnProperty("to_emails")) {
        obj["to_emails"] = ApiClient.convertToType(data["to_emails"], ["String"]);
      }
      if (data.hasOwnProperty("cc_emails")) {
        obj["cc_emails"] = ApiClient.convertToType(data["cc_emails"], ["String"]);
      }
      if (data.hasOwnProperty("bcc_emails")) {
        obj["bcc_emails"] = ApiClient.convertToType(data["bcc_emails"], ["String"]);
      }
    }
    return obj;
  }
}

/**
 * Unique ID of the conversatoin
 * @member {Number} id
 */
Conversation.prototype["id"] = undefined;

/**
 * Unique ID of the user who created the note
 * @member {Number} user_id
 */
Conversation.prototype["user_id"] = undefined;

/**
 * Source of the note, 0-email, 1-form, 2-note, 3-status, 4-meta, 5-feedback, 6-forward_email)
 * @member {module:model/Conversation.SourceEnum} source
 */
Conversation.prototype["source"] = undefined;

/**
 * Set to true if a particular conversation should appear as being created from the outside (i.e., not through the web portal)
 * @member {Boolean} incoming
 */
Conversation.prototype["incoming"] = undefined;

/**
 * Date time at which the conversation is created
 * @member {String} created_at
 */
Conversation.prototype["created_at"] = undefined;

/**
 * Date time at which the conversation is updated
 * @member {String} updated_at
 */
Conversation.prototype["updated_at"] = undefined;

/**
 * @member {String} body
 */
Conversation.prototype["body"] = undefined;

/**
 * @member {String} body_text
 */
Conversation.prototype["body_text"] = undefined;

/**
 * @member {Array.<module:model/Attachment>} attachments
 */
Conversation.prototype["attachments"] = undefined;

/**
 * Unique ID of the change to which the note belongs
 * @member {Number} change_id
 */
Conversation.prototype["change_id"] = undefined;

/**
 * Unique ID of the ticket to which the note belongs
 * @member {Number} ticket_id
 */
Conversation.prototype["ticket_id"] = undefined;

/**
 * @member {String} from_email
 */
Conversation.prototype["from_email"] = undefined;

/**
 * Addresses to which the conversation must be sent
 * @member {Array.<String>} to_emails
 */
Conversation.prototype["to_emails"] = undefined;

/**
 * Addresses which must be copied on while sending the conversation
 * @member {Array.<String>} cc_emails
 */
Conversation.prototype["cc_emails"] = undefined;

/**
 * Addresses to which a blind copy must be sent
 * @member {Array.<String>} bcc_emails
 */
Conversation.prototype["bcc_emails"] = undefined;

/**
 * Allowed values for the <code>source</code> property.
 * @enum {Number}
 * @readonly
 */
Conversation["SourceEnum"] = {
  /**
   * value: 0
   * @const
   */
  0: 0,

  /**
   * value: 1
   * @const
   */
  1: 1,

  /**
   * value: 2
   * @const
   */
  2: 2,

  /**
   * value: 3
   * @const
   */
  3: 3,

  /**
   * value: 4
   * @const
   */
  4: 4,

  /**
   * value: 5
   * @const
   */
  5: 5,

  /**
   * value: 6
   * @const
   */
  6: 6
};

export default Conversation;
