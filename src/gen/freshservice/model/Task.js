/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The Task model module.
 * @module model/Task
 * @version 2.0.1
 */
class Task {
  /**
   * Constructs a new <code>Task</code>.
   * @alias module:model/Task
   */
  constructor() {
    Task.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Task</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Task} obj Optional instance to populate.
   * @return {module:model/Task} The populated <code>Task</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Task();

      if (data.hasOwnProperty("created_by")) {
        obj["created_by"] = ApiClient.convertToType(data["created_by"], "Number");
      }
      if (data.hasOwnProperty("agent_id")) {
        obj["agent_id"] = ApiClient.convertToType(data["agent_id"], "Number");
      }
      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("status")) {
        obj["status"] = ApiClient.convertToType(data["status"], "Number");
      }
      if (data.hasOwnProperty("parent_id")) {
        obj["parent_id"] = ApiClient.convertToType(data["parent_id"], "Number");
      }
      if (data.hasOwnProperty("parent_type")) {
        obj["parent_type"] = ApiClient.convertToType(data["parent_type"], "String");
      }
      if (data.hasOwnProperty("due_date")) {
        obj["due_date"] = ApiClient.convertToType(data["due_date"], "Date");
      }
      if (data.hasOwnProperty("notify_before")) {
        obj["notify_before"] = ApiClient.convertToType(data["notify_before"], "Number");
      }
      if (data.hasOwnProperty("title")) {
        obj["title"] = ApiClient.convertToType(data["title"], "String");
      }
      if (data.hasOwnProperty("description")) {
        obj["description"] = ApiClient.convertToType(data["description"], "String");
      }
      if (data.hasOwnProperty("created_at")) {
        obj["created_at"] = ApiClient.convertToType(data["created_at"], "Date");
      }
      if (data.hasOwnProperty("updated_at")) {
        obj["updated_at"] = ApiClient.convertToType(data["updated_at"], "Date");
      }
      if (data.hasOwnProperty("closed_at")) {
        obj["closed_at"] = ApiClient.convertToType(data["closed_at"], "Date");
      }
      if (data.hasOwnProperty("group_id")) {
        obj["group_id"] = ApiClient.convertToType(data["group_id"], "Number");
      }
      if (data.hasOwnProperty("start_date")) {
        obj["start_date"] = ApiClient.convertToType(data["start_date"], "Date");
      }
    }
    return obj;
  }
}

/**
 * Unique ID of the user who created the task
 * @member {Number} created_by
 */
Task.prototype["created_by"] = undefined;

/**
 * Id of the agent to whom the task is assigned
 * @member {Number} agent_id
 */
Task.prototype["agent_id"] = undefined;

/**
 * Unique ID of the task
 * @member {Number} id
 */
Task.prototype["id"] = undefined;

/**
 * Status of the task, 1-Open, 2-In Progress, 3-Completed
 * @member {module:model/Task.StatusEnum} status
 */
Task.prototype["status"] = undefined;

/**
 * Unique ID of the parent entity to which the task belongs
 * @member {Number} parent_id
 */
Task.prototype["parent_id"] = undefined;

/**
 * Type of the parent entity - [Ticket, Problem, Change, Release, Project]
 * @member {String} parent_type
 */
Task.prototype["parent_type"] = undefined;

/**
 * Due date of the task
 * @member {Date} due_date
 */
Task.prototype["due_date"] = undefined;

/**
 * Time in seconds before which notification is sent prior to due date
 * @member {Number} notify_before
 */
Task.prototype["notify_before"] = undefined;

/**
 * Title of the task
 * @member {String} title
 */
Task.prototype["title"] = undefined;

/**
 * Description of the task
 * @member {String} description
 */
Task.prototype["description"] = undefined;

/**
 * Timestamp at which the task was created
 * @member {Date} created_at
 */
Task.prototype["created_at"] = undefined;

/**
 * Timestamp at which the task was updated
 * @member {Date} updated_at
 */
Task.prototype["updated_at"] = undefined;

/**
 * Timestamp at which the task was closed
 * @member {Date} closed_at
 */
Task.prototype["closed_at"] = undefined;

/**
 * Unique ID of the group to which the task is assigned
 * @member {Number} group_id
 */
Task.prototype["group_id"] = undefined;

/**
 * Timestamp at which the task is started
 * @member {Date} start_date
 */
Task.prototype["start_date"] = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {Number}
 * @readonly
 */
Task["StatusEnum"] = {
  /**
   * value: 1
   * @const
   */
  1: 1,

  /**
   * value: 2
   * @const
   */
  2: 2,

  /**
   * value: 3
   * @const
   */
  3: 3,

  /**
   * value: 4
   * @const
   */
  4: 4
};

export default Task;
