/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The Product model module.
 * @module model/Product
 * @version 1.0.0
 */
class Product {
  /**
   * Constructs a new <code>Product</code>.
   * @alias module:model/Product
   */
  constructor() {
    Product.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Product} obj Optional instance to populate.
   * @return {module:model/Product} The populated <code>Product</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Product();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("asset_type_id")) {
        obj["asset_type_id"] = ApiClient.convertToType(data["asset_type_id"], "Number");
      }
      if (data.hasOwnProperty("manufacturer")) {
        obj["manufacturer"] = ApiClient.convertToType(data["manufacturer"], "String");
      }
      if (data.hasOwnProperty("status_id")) {
        obj["status_id"] = ApiClient.convertToType(data["status_id"], "Number");
      }
      if (data.hasOwnProperty("mode_of_procurement_id")) {
        obj["mode_of_procurement_id"] = ApiClient.convertToType(data["mode_of_procurement_id"], "Number");
      }
      if (data.hasOwnProperty("depreciation_type_id")) {
        obj["depreciation_type_id"] = ApiClient.convertToType(data["depreciation_type_id"], "Number");
      }
      if (data.hasOwnProperty("description")) {
        obj["description"] = ApiClient.convertToType(data["description"], "String");
      }
    }
    return obj;
  }
}

/**
 * Unique ID of the Product
 * @member {Number} id
 */
Product.prototype["id"] = undefined;

/**
 * Name of the Product
 * @member {String} name
 */
Product.prototype["name"] = undefined;

/**
 * Asset Type id of the Product
 * @member {Number} asset_type_id
 */
Product.prototype["asset_type_id"] = undefined;

/**
 * Manufacturer Name - Free Text
 * @member {String} manufacturer
 */
Product.prototype["manufacturer"] = undefined;

/**
 * status can be   `1` - In Production   `2` - In Pipeline   `3` - Retired
 * @member {module:model/Product.StatusIdEnum} status_id
 */
Product.prototype["status_id"] = undefined;

/**
 * mode of procurement can be   `1` - Buy   `2` - Lease   `3` - Both
 * @member {module:model/Product.ModeOfProcurementIdEnum} mode_of_procurement_id
 */
Product.prototype["mode_of_procurement_id"] = undefined;

/**
 * @member {Number} depreciation_type_id
 */
Product.prototype["depreciation_type_id"] = undefined;

/**
 * Unique identifier for the depreciation type used
 * @member {String} description
 */
Product.prototype["description"] = undefined;

/**
 * Allowed values for the <code>status_id</code> property.
 * @enum {Number}
 * @readonly
 */
Product["StatusIdEnum"] = {
  /**
   * value: 1
   * @const
   */
  1: 1,

  /**
   * value: 2
   * @const
   */
  2: 2,

  /**
   * value: 3
   * @const
   */
  3: 3
};

/**
 * Allowed values for the <code>mode_of_procurement_id</code> property.
 * @enum {Number}
 * @readonly
 */
Product["ModeOfProcurementIdEnum"] = {
  /**
   * value: 1
   * @const
   */
  1: 1,

  /**
   * value: 2
   * @const
   */
  2: 2,

  /**
   * value: 3
   * @const
   */
  3: 3
};

export default Product;
