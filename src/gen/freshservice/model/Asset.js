/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The Asset model module.
 * @module model/Asset
 * @version 1.0.0
 */
class Asset {
  /**
   * Constructs a new <code>Asset</code>.
   * @alias module:model/Asset
   */
  constructor() {
    Asset.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Asset</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Asset} obj Optional instance to populate.
   * @return {module:model/Asset} The populated <code>Asset</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Asset();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("display_id")) {
        obj["display_id"] = ApiClient.convertToType(data["display_id"], "Number");
      }
      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("description")) {
        obj["description"] = ApiClient.convertToType(data["description"], "String");
      }
      if (data.hasOwnProperty("asset_type_id")) {
        obj["asset_type_id"] = ApiClient.convertToType(data["asset_type_id"], "Number");
      }
      if (data.hasOwnProperty("impact")) {
        obj["impact"] = ApiClient.convertToType(data["impact"], "String");
      }
      if (data.hasOwnProperty("author_type")) {
        obj["author_type"] = ApiClient.convertToType(data["author_type"], "String");
      }
      if (data.hasOwnProperty("usage_type")) {
        obj["usage_type"] = ApiClient.convertToType(data["usage_type"], "String");
      }
      if (data.hasOwnProperty("asset_tag")) {
        obj["asset_tag"] = ApiClient.convertToType(data["asset_tag"], "String");
      }
      if (data.hasOwnProperty("user_id")) {
        obj["user_id"] = ApiClient.convertToType(data["user_id"], "Number");
      }
      if (data.hasOwnProperty("department_id")) {
        obj["department_id"] = ApiClient.convertToType(data["department_id"], "Number");
      }
      if (data.hasOwnProperty("location_id")) {
        obj["location_id"] = ApiClient.convertToType(data["location_id"], "Number");
      }
      if (data.hasOwnProperty("agent_id")) {
        obj["agent_id"] = ApiClient.convertToType(data["agent_id"], "Number");
      }
      if (data.hasOwnProperty("group_id")) {
        obj["group_id"] = ApiClient.convertToType(data["group_id"], "Number");
      }
      if (data.hasOwnProperty("assigned_on")) {
        obj["assigned_on"] = ApiClient.convertToType(data["assigned_on"], "Date");
      }
      if (data.hasOwnProperty("created_at")) {
        obj["created_at"] = ApiClient.convertToType(data["created_at"], "Date");
      }
      if (data.hasOwnProperty("updated_at")) {
        obj["updated_at"] = ApiClient.convertToType(data["updated_at"], "Date");
      }
      if (data.hasOwnProperty("type_fields")) {
        obj["type_fields"] = ApiClient.convertToType(data["type_fields"], Object);
      }
    }
    return obj;
  }
}

/**
 * id of the asset
 * @member {Number} id
 */
Asset.prototype["id"] = undefined;

/**
 * display id of the asset that is used for all operations
 * @member {Number} display_id
 */
Asset.prototype["display_id"] = undefined;

/**
 * Display Name of the Asset
 * @member {String} name
 */
Asset.prototype["name"] = undefined;

/**
 * Description of the asset
 * @member {String} description
 */
Asset.prototype["description"] = undefined;

/**
 * Id of the asset type.
 * @member {Number} asset_type_id
 */
Asset.prototype["asset_type_id"] = undefined;

/**
 * Impact of the asset (accepted values 'high' 'medium' 'low')
 * @member {module:model/Asset.ImpactEnum} impact
 */
Asset.prototype["impact"] = undefined;

/**
 * Asset created by source
 * @member {String} author_type
 */
Asset.prototype["author_type"] = undefined;

/**
 * Usage type of the asset  (accepted values are 'permanent' & 'loaner')
 * @member {module:model/Asset.UsageTypeEnum} usage_type
 */
Asset.prototype["usage_type"] = undefined;

/**
 * Asset tag of the asset
 * @member {String} asset_tag
 */
Asset.prototype["asset_tag"] = undefined;

/**
 * Used by of the asset
 * @member {Number} user_id
 */
Asset.prototype["user_id"] = undefined;

/**
 * Department of the asset
 * @member {Number} department_id
 */
Asset.prototype["department_id"] = undefined;

/**
 * Location of the asset
 * @member {Number} location_id
 */
Asset.prototype["location_id"] = undefined;

/**
 * Managed by of the asset
 * @member {Number} agent_id
 */
Asset.prototype["agent_id"] = undefined;

/**
 * Managed by group of the asset
 * @member {Number} group_id
 */
Asset.prototype["group_id"] = undefined;

/**
 * Date and time when the asset was assigned
 * @member {Date} assigned_on
 */
Asset.prototype["assigned_on"] = undefined;

/**
 * Timestamp at which the asset was created
 * @member {Date} created_at
 */
Asset.prototype["created_at"] = undefined;

/**
 * Timestamp at which the asset was last modified
 * @member {Date} updated_at
 */
Asset.prototype["updated_at"] = undefined;

/**
 * Fields specific to every asset type (Every asset will have default base fields and type specific fields)
 * @member {Object} type_fields
 */
Asset.prototype["type_fields"] = undefined;

/**
 * Allowed values for the <code>impact</code> property.
 * @enum {String}
 * @readonly
 */
Asset["ImpactEnum"] = {
  /**
   * value: "low"
   * @const
   */
  low: "low",

  /**
   * value: "medium"
   * @const
   */
  medium: "medium",

  /**
   * value: "high"
   * @const
   */
  high: "high"
};

/**
 * Allowed values for the <code>usage_type</code> property.
 * @enum {String}
 * @readonly
 */
Asset["UsageTypeEnum"] = {
  /**
   * value: "permanent"
   * @const
   */
  permanent: "permanent",

  /**
   * value: "loaner"
   * @const
   */
  loaner: "loaner"
};

export default Asset;
