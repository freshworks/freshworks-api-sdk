/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The SolutionArticle model module.
 * @module model/SolutionArticle
 * @version 1.0.0
 */
class SolutionArticle {
  /**
   * Constructs a new <code>SolutionArticle</code>.
   * @alias module:model/SolutionArticle
   */
  constructor() {
    SolutionArticle.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>SolutionArticle</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SolutionArticle} obj Optional instance to populate.
   * @return {module:model/SolutionArticle} The populated <code>SolutionArticle</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SolutionArticle();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("folder_id")) {
        obj["folder_id"] = ApiClient.convertToType(data["folder_id"], "Number");
      }
      if (data.hasOwnProperty("category_id")) {
        obj["category_id"] = ApiClient.convertToType(data["category_id"], "Number");
      }
      if (data.hasOwnProperty("title")) {
        obj["title"] = ApiClient.convertToType(data["title"], "String");
      }
      if (data.hasOwnProperty("description")) {
        obj["description"] = ApiClient.convertToType(data["description"], "String");
      }
      if (data.hasOwnProperty("description_text")) {
        obj["description_text"] = ApiClient.convertToType(data["description_text"], "String");
      }
      if (data.hasOwnProperty("position")) {
        obj["position"] = ApiClient.convertToType(data["position"], "Number");
      }
      if (data.hasOwnProperty("article_type")) {
        obj["article_type"] = ApiClient.convertToType(data["article_type"], "Number");
      }
      if (data.hasOwnProperty("status")) {
        obj["status"] = ApiClient.convertToType(data["status"], "Number");
      }
      if (data.hasOwnProperty("thumbs_up")) {
        obj["thumbs_up"] = ApiClient.convertToType(data["thumbs_up"], "Number");
      }
      if (data.hasOwnProperty("thumbs_down")) {
        obj["thumbs_down"] = ApiClient.convertToType(data["thumbs_down"], "Number");
      }
      if (data.hasOwnProperty("created_by")) {
        obj["created_by"] = ApiClient.convertToType(data["created_by"], "Number");
      }
      if (data.hasOwnProperty("created_time")) {
        obj["created_time"] = ApiClient.convertToType(data["created_time"], "Date");
      }
      if (data.hasOwnProperty("updated_by")) {
        obj["updated_by"] = ApiClient.convertToType(data["updated_by"], "Number");
      }
      if (data.hasOwnProperty("updated_time")) {
        obj["updated_time"] = ApiClient.convertToType(data["updated_time"], "Date");
      }
      if (data.hasOwnProperty("views")) {
        obj["views"] = ApiClient.convertToType(data["views"], "Number");
      }
      if (data.hasOwnProperty("search_keywords")) {
        obj["search_keywords"] = ApiClient.convertToType(data["search_keywords"], ["String"]);
      }
      if (data.hasOwnProperty("tags")) {
        obj["tags"] = ApiClient.convertToType(data["tags"], ["String"]);
      }
    }
    return obj;
  }
}

/**
 * Unique identifier of the solution article
 * @member {Number} id
 */
SolutionArticle.prototype["id"] = undefined;

/**
 * ID of the folder under which the article is listed
 * @member {Number} folder_id
 */
SolutionArticle.prototype["folder_id"] = undefined;

/**
 * Unique identifier of the solution category
 * @member {Number} category_id
 */
SolutionArticle.prototype["category_id"] = undefined;

/**
 * Title of the solution article
 * @member {String} title
 */
SolutionArticle.prototype["title"] = undefined;

/**
 * Content of the solution article in HTML format
 * @member {String} description
 */
SolutionArticle.prototype["description"] = undefined;

/**
 * Content of the solution article in plain-text format
 * @member {String} description_text
 */
SolutionArticle.prototype["description_text"] = undefined;

/**
 * The rank of the solution article in the article listing
 * @member {Number} position
 */
SolutionArticle.prototype["position"] = undefined;

/**
 * The type of the article. ( 1 - permanent, 2 - workaround )
 * @member {Number} article_type
 */
SolutionArticle.prototype["article_type"] = undefined;

/**
 * Status of the article. ( 1 - draft, 2 - published )
 * @member {Number} status
 */
SolutionArticle.prototype["status"] = undefined;

/**
 * Number of upvotes for the article
 * @member {Number} thumbs_up
 */
SolutionArticle.prototype["thumbs_up"] = undefined;

/**
 * Number of downvotes for the article
 * @member {Number} thumbs_down
 */
SolutionArticle.prototype["thumbs_down"] = undefined;

/**
 * ID of the user who created the article
 * @member {Number} created_by
 */
SolutionArticle.prototype["created_by"] = undefined;

/**
 * Timestamp at which the department was created
 * @member {Date} created_time
 */
SolutionArticle.prototype["created_time"] = undefined;

/**
 * ID of the user who last updated the article
 * @member {Number} updated_by
 */
SolutionArticle.prototype["updated_by"] = undefined;

/**
 * Timestamp at which the department was last modified
 * @member {Date} updated_time
 */
SolutionArticle.prototype["updated_time"] = undefined;

/**
 * number of views for the article
 * @member {Number} views
 */
SolutionArticle.prototype["views"] = undefined;

/**
 * Keywords for which this article should be mapped
 * @member {Array.<String>} search_keywords
 */
SolutionArticle.prototype["search_keywords"] = undefined;

/**
 * The tags associated to the article
 * @member {Array.<String>} tags
 */
SolutionArticle.prototype["tags"] = undefined;

export default SolutionArticle;
