/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The TimeEntry model module.
 * @module model/TimeEntry
 * @version 1.0.0
 */
class TimeEntry {
  /**
   * Constructs a new <code>TimeEntry</code>.
   * @alias module:model/TimeEntry
   */
  constructor() {
    TimeEntry.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>TimeEntry</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TimeEntry} obj Optional instance to populate.
   * @return {module:model/TimeEntry} The populated <code>TimeEntry</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TimeEntry();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("task_id")) {
        obj["task_id"] = ApiClient.convertToType(data["task_id"], "Number");
      }
      if (data.hasOwnProperty("parent_id")) {
        obj["parent_id"] = ApiClient.convertToType(data["parent_id"], "Number");
      }
      if (data.hasOwnProperty("parent_type")) {
        obj["parent_type"] = ApiClient.convertToType(data["parent_type"], "String");
      }
      if (data.hasOwnProperty("start_time")) {
        obj["start_time"] = ApiClient.convertToType(data["start_time"], "Date");
      }
      if (data.hasOwnProperty("time_spent")) {
        obj["time_spent"] = ApiClient.convertToType(data["time_spent"], "String");
      }
      if (data.hasOwnProperty("timer_running")) {
        obj["timer_running"] = ApiClient.convertToType(data["timer_running"], "Boolean");
      }
      if (data.hasOwnProperty("billable")) {
        obj["billable"] = ApiClient.convertToType(data["billable"], "Boolean");
      }
      if (data.hasOwnProperty("agent_id")) {
        obj["agent_id"] = ApiClient.convertToType(data["agent_id"], "Number");
      }
      if (data.hasOwnProperty("note")) {
        obj["note"] = ApiClient.convertToType(data["note"], "String");
      }
      if (data.hasOwnProperty("created_at")) {
        obj["created_at"] = ApiClient.convertToType(data["created_at"], "Date");
      }
      if (data.hasOwnProperty("updated_at")) {
        obj["updated_at"] = ApiClient.convertToType(data["updated_at"], "Date");
      }
      if (data.hasOwnProperty("executed_at")) {
        obj["executed_at"] = ApiClient.convertToType(data["executed_at"], "Date");
      }
      if (data.hasOwnProperty("custom_fields")) {
        obj["custom_fields"] = ApiClient.convertToType(data["custom_fields"], { String: "String" });
      }
    }
    return obj;
  }
}

/**
 * Unique ID of the time entry
 * @member {Number} id
 */
TimeEntry.prototype["id"] = undefined;

/**
 * Unique ID of the task associated with the time entry
 * @member {Number} task_id
 */
TimeEntry.prototype["task_id"] = undefined;

/**
 * Unique ID of the parent entity to which the time entry belongs
 * @member {Number} parent_id
 */
TimeEntry.prototype["parent_id"] = undefined;

/**
 * Type of the parent entity - [Ticket, Problem, Change, Release, Project]
 * @member {String} parent_type
 */
TimeEntry.prototype["parent_type"] = undefined;

/**
 * Time at which the timer started
 * @member {Date} start_time
 */
TimeEntry.prototype["start_time"] = undefined;

/**
 * Duration of time spent in seconds
 * @member {String} time_spent
 */
TimeEntry.prototype["time_spent"] = undefined;

/**
 * true if timer is running, false otherwise
 * @member {Boolean} timer_running
 */
TimeEntry.prototype["timer_running"] = undefined;

/**
 * true if billable, false otherwise
 * @member {Boolean} billable
 */
TimeEntry.prototype["billable"] = undefined;

/**
 * Unique ID of the user who created the time entry
 * @member {Number} agent_id
 */
TimeEntry.prototype["agent_id"] = undefined;

/**
 * Description note of the time entry
 * @member {String} note
 */
TimeEntry.prototype["note"] = undefined;

/**
 * Timestamp at which the time entry is created
 * @member {Date} created_at
 */
TimeEntry.prototype["created_at"] = undefined;

/**
 * Time stamp at which the time entry is updated
 * @member {Date} updated_at
 */
TimeEntry.prototype["updated_at"] = undefined;

/**
 * Date time at which the time entry is executed
 * @member {Date} executed_at
 */
TimeEntry.prototype["executed_at"] = undefined;

/**
 * Key value pairs containing the names and values of custom fields
 * @member {Object.<String, String>} custom_fields
 */
TimeEntry.prototype["custom_fields"] = undefined;

export default TimeEntry;
