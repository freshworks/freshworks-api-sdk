/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import SolutionFolderVisibility from "./SolutionFolderVisibility";

/**
 * The SolutionFolder model module.
 * @module model/SolutionFolder
 * @version 2.0.1
 */
class SolutionFolder {
  /**
   * Constructs a new <code>SolutionFolder</code>.
   * @alias module:model/SolutionFolder
   */
  constructor() {
    SolutionFolder.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>SolutionFolder</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SolutionFolder} obj Optional instance to populate.
   * @return {module:model/SolutionFolder} The populated <code>SolutionFolder</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SolutionFolder();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("category_id")) {
        obj["category_id"] = ApiClient.convertToType(data["category_id"], "Number");
      }
      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("description")) {
        obj["description"] = ApiClient.convertToType(data["description"], "String");
      }
      if (data.hasOwnProperty("position")) {
        obj["position"] = ApiClient.convertToType(data["position"], "Number");
      }
      if (data.hasOwnProperty("managed_by_group")) {
        obj["managed_by_group"] = ApiClient.convertToType(data["managed_by_group"], "Number");
      }
      if (data.hasOwnProperty("managed_by_agent")) {
        obj["managed_by_agent"] = ApiClient.convertToType(data["managed_by_agent"], "Number");
      }
      if (data.hasOwnProperty("visibility")) {
        obj["visibility"] = SolutionFolderVisibility.constructFromObject(data["visibility"]);
      }
      if (data.hasOwnProperty("default_folder")) {
        obj["default_folder"] = ApiClient.convertToType(data["default_folder"], "Boolean");
      }
    }
    return obj;
  }
}

/**
 * Unique identifier of the solution folder
 * @member {Number} id
 */
SolutionFolder.prototype["id"] = undefined;

/**
 * Unique identifier of the solution category
 * @member {Number} category_id
 */
SolutionFolder.prototype["category_id"] = undefined;

/**
 * Name of the solution folder
 * @member {String} name
 */
SolutionFolder.prototype["name"] = undefined;

/**
 * Description of the solution folder
 * @member {String} description
 */
SolutionFolder.prototype["description"] = undefined;

/**
 * The position of the solution folder in the folder listing. When there are more than 1 folders in a category, then this will determine the position.
 * @member {Number} position
 */
SolutionFolder.prototype["position"] = undefined;

/**
 * Agent group ID who can edit the articles in the folder
 * @member {Number} managed_by_group
 */
SolutionFolder.prototype["managed_by_group"] = undefined;

/**
 * The agent ID who can edit the articles in the folder
 * @member {Number} managed_by_agent
 */
SolutionFolder.prototype["managed_by_agent"] = undefined;

/**
 * @member {module:model/SolutionFolderVisibility} visibility
 */
SolutionFolder.prototype["visibility"] = undefined;

/**
 * If this is a default folder shipped with the product. You can create or rename a default folder.
 * @member {Boolean} default_folder
 */
SolutionFolder.prototype["default_folder"] = undefined;

export default SolutionFolder;
