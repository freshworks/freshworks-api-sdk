/**
 * Freshservice APIs
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The RoleAssignment model module.
 * @module model/RoleAssignment
 * @version 1.0.0
 */
class RoleAssignment {
  /**
   * Constructs a new <code>RoleAssignment</code>.
   * @alias module:model/RoleAssignment
   */
  constructor() {
    RoleAssignment.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>RoleAssignment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RoleAssignment} obj Optional instance to populate.
   * @return {module:model/RoleAssignment} The populated <code>RoleAssignment</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new RoleAssignment();

      if (data.hasOwnProperty("role_id")) {
        obj["role_id"] = ApiClient.convertToType(data["role_id"], "Number");
      }
      if (data.hasOwnProperty("assignment_scope")) {
        obj["assignment_scope"] = ApiClient.convertToType(data["assignment_scope"], "String");
      }
      if (data.hasOwnProperty("groups")) {
        obj["groups"] = ApiClient.convertToType(data["groups"], ["Number"]);
      }
    }
    return obj;
  }
}

/**
 * Unique identifier of the role assigned
 * @member {Number} role_id
 */
RoleAssignment.prototype["role_id"] = undefined;

/**
 * The scope in which the agent can use the permissions granted by this role. Possible values are entire_helpdesk (all plans), member_groups (Blossom, Garden, and Estate), specified_groups (Forest only), and assigned_items (all plans)
 * @member {module:model/RoleAssignment.AssignmentScopeEnum} assignment_scope
 */
RoleAssignment.prototype["assignment_scope"] = undefined;

/**
 * Groups in which the permissions granted by the role applies. Returns an array of group identifiers when the assignment_scope is specified_groups, and null otherwise.
 * @member {Array.<Number>} groups
 */
RoleAssignment.prototype["groups"] = undefined;

/**
 * Allowed values for the <code>assignment_scope</code> property.
 * @enum {String}
 * @readonly
 */
RoleAssignment["AssignmentScopeEnum"] = {
  /**
   * value: "entire_helpdesk"
   * @const
   */
  entire_helpdesk: "entire_helpdesk",

  /**
   * value: "member_groups"
   * @const
   */
  member_groups: "member_groups",

  /**
   * value: "specified_groups"
   * @const
   */
  specified_groups: "specified_groups",

  /**
   * value: "assigned_items"
   * @const
   */
  assigned_items: "assigned_items"
};

export default RoleAssignment;
