/**
 * Freshservice
 * Public REST APIs for Freshservice
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mithun.mohandas@freshworks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The Announcement model module.
 * @module model/Announcement
 * @version 2.0.1
 */
class Announcement {
  /**
   * Constructs a new <code>Announcement</code>.
   * @alias module:model/Announcement
   */
  constructor() {
    Announcement.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Announcement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Announcement} obj Optional instance to populate.
   * @return {module:model/Announcement} The populated <code>Announcement</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Announcement();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("created_by")) {
        obj["created_by"] = ApiClient.convertToType(data["created_by"], "Number");
      }
      if (data.hasOwnProperty("state")) {
        obj["state"] = ApiClient.convertToType(data["state"], "String");
      }
      if (data.hasOwnProperty("title")) {
        obj["title"] = ApiClient.convertToType(data["title"], "String");
      }
      if (data.hasOwnProperty("body")) {
        obj["body"] = ApiClient.convertToType(data["body"], "String");
      }
      if (data.hasOwnProperty("body_html")) {
        obj["body_html"] = ApiClient.convertToType(data["body_html"], "String");
      }
      if (data.hasOwnProperty("visible_from")) {
        obj["visible_from"] = ApiClient.convertToType(data["visible_from"], "Date");
      }
      if (data.hasOwnProperty("visible_till")) {
        obj["visible_till"] = ApiClient.convertToType(data["visible_till"], "Date");
      }
      if (data.hasOwnProperty("visibility")) {
        obj["visibility"] = ApiClient.convertToType(data["visibility"], "String");
      }
      if (data.hasOwnProperty("departments")) {
        obj["departments"] = ApiClient.convertToType(data["departments"], ["Number"]);
      }
      if (data.hasOwnProperty("groups")) {
        obj["groups"] = ApiClient.convertToType(data["groups"], ["Number"]);
      }
      if (data.hasOwnProperty("is_read")) {
        obj["is_read"] = ApiClient.convertToType(data["is_read"], "Boolean");
      }
      if (data.hasOwnProperty("send_email")) {
        obj["send_email"] = ApiClient.convertToType(data["send_email"], "Boolean");
      }
      if (data.hasOwnProperty("additional_emails")) {
        obj["additional_emails"] = ApiClient.convertToType(data["additional_emails"], ["String"]);
      }
      if (data.hasOwnProperty("created_at")) {
        obj["created_at"] = ApiClient.convertToType(data["created_at"], "Date");
      }
      if (data.hasOwnProperty("updated_at")) {
        obj["updated_at"] = ApiClient.convertToType(data["updated_at"], "Date");
      }
    }
    return obj;
  }
}

/**
 * Unique identifier of the Announcement
 * @member {Number} id
 */
Announcement.prototype["id"] = undefined;

/**
 * Unique identifier of the agent to created this Announcement
 * @member {Number} created_by
 */
Announcement.prototype["created_by"] = undefined;

/**
 * State of the Announcement active, archived, scheduled
 * @member {String} state
 */
Announcement.prototype["state"] = undefined;

/**
 * Title of the Announcement
 * @member {String} title
 */
Announcement.prototype["title"] = undefined;

/**
 * Body of the Announcement in plain text
 * @member {String} body
 */
Announcement.prototype["body"] = undefined;

/**
 * Body of the Announcement in HTML format
 * @member {String} body_html
 */
Announcement.prototype["body_html"] = undefined;

/**
 * Timestamp at which Announcement becomes active
 * @member {Date} visible_from
 */
Announcement.prototype["visible_from"] = undefined;

/**
 * Timestamp until which Announcement is active
 * @member {Date} visible_till
 */
Announcement.prototype["visible_till"] = undefined;

/**
 * Who can see the announcement. Values - everyone, agents_only, agents_and_groups
 * @member {String} visibility
 */
Announcement.prototype["visibility"] = undefined;

/**
 * Array of Department IDs that can view this Announcement
 * @member {Array.<Number>} departments
 */
Announcement.prototype["departments"] = undefined;

/**
 * Array of Group IDs that can view this Announcement
 * @member {Array.<Number>} groups
 */
Announcement.prototype["groups"] = undefined;

/**
 * True if the logged-in-user has read the announcement. False, otherwise
 * @member {Boolean} is_read
 */
Announcement.prototype["is_read"] = undefined;

/**
 * True if the announcement needs to be sent via email as well. False, otherwise
 * @member {Boolean} send_email
 */
Announcement.prototype["send_email"] = undefined;

/**
 * Additional email addresses to which the announcement needs to be sent
 * @member {Array.<String>} additional_emails
 */
Announcement.prototype["additional_emails"] = undefined;

/**
 * Timestamp at which Announcement was created
 * @member {Date} created_at
 */
Announcement.prototype["created_at"] = undefined;

/**
 * Timestamp at which Announcement was last updated
 * @member {Date} updated_at
 */
Announcement.prototype["updated_at"] = undefined;

export default Announcement;
